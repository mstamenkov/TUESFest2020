
smart_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003dbc  08003dbc  00013dbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003dfc  08003dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003e00  08003e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  08003e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
  8 .bss          00000788  20000090  20000090  00020090  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000818  20000818  00020090  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022e44  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000045cc  00000000  00000000  00042f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000adf7  00000000  00000000  000474d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  000522c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  00053000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000889d  00000000  00000000  00054220  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000054c3  00000000  00000000  0005cabd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00061f80  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002780  00000000  00000000  00061ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003da4 	.word	0x08003da4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08003da4 	.word	0x08003da4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f8a8 	bl	8000644 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f85e 	bl	80005c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000028 	.word	0x20000028
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f82f 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f003 f8b2 	bl	80036b0 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	200000bc 	.word	0x200000bc
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	200000bc 	.word	0x200000bc

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005b0:	0200      	lsls	r0, r0, #8
 80005b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	68dc      	ldr	r4, [r3, #12]
 80005ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	bf28      	it	cs
 80005d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 0501 	mov.w	r5, #1
 80005e0:	fa05 f303 	lsl.w	r3, r5, r3
 80005e4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	bf8c      	ite	hi
 80005ea:	3c03      	subhi	r4, #3
 80005ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ee:	4019      	ands	r1, r3
 80005f0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f2:	fa05 f404 	lsl.w	r4, r5, r4
 80005f6:	3c01      	subs	r4, #1
 80005f8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	ea42 0201 	orr.w	r2, r2, r1
 8000600:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfaf      	iteee	ge
 8000606:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	f000 000f 	andlt.w	r0, r0, #15
 800060e:	4b06      	ldrlt	r3, [pc, #24]	; (8000628 <HAL_NVIC_SetPriority+0x64>)
 8000610:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	bfa5      	ittet	ge
 8000614:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000618:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800062c:	0942      	lsrs	r2, r0, #5
 800062e:	2301      	movs	r3, #1
 8000630:	f000 001f 	and.w	r0, r0, #31
 8000634:	fa03 f000 	lsl.w	r0, r3, r0
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <HAL_NVIC_EnableIRQ+0x14>)
 800063a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100

08000644 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	3801      	subs	r0, #1
 8000646:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064a:	d20a      	bcs.n	8000662 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	21f0      	movs	r1, #240	; 0xf0
 8000654:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000662:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e010 	.word	0xe000e010
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000672:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000674:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000676:	bf0c      	ite	eq
 8000678:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800067c:	f022 0204 	bicne.w	r2, r2, #4
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	4770      	bx	lr
 8000684:	e000e010 	.word	0xe000e010

08000688 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000688:	4770      	bx	lr

0800068a <HAL_SYSTICK_IRQHandler>:
{
 800068a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800068c:	f7ff fffc 	bl	8000688 <HAL_SYSTICK_Callback>
 8000690:	bd08      	pop	{r3, pc}
	...

08000694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000698:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800084c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006a0:	4a68      	ldr	r2, [pc, #416]	; (8000844 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006a2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000850 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006a8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006aa:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ae:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006b0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006b8:	45b6      	cmp	lr, r6
 80006ba:	f040 80ae 	bne.w	800081a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006be:	684c      	ldr	r4, [r1, #4]
 80006c0:	f024 0710 	bic.w	r7, r4, #16
 80006c4:	2f02      	cmp	r7, #2
 80006c6:	d116      	bne.n	80006f6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006c8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006cc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006d0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006d4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006d8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006dc:	f04f 0c0f 	mov.w	ip, #15
 80006e0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006e4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006e8:	690d      	ldr	r5, [r1, #16]
 80006ea:	fa05 f50b 	lsl.w	r5, r5, fp
 80006ee:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006f2:	f8ca 5020 	str.w	r5, [sl, #32]
 80006f6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006fa:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006fc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000700:	fa05 f50a 	lsl.w	r5, r5, sl
 8000704:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000706:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800070a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800070e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000712:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000714:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000718:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800071a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800071e:	d811      	bhi.n	8000744 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000720:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000722:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000726:	68cf      	ldr	r7, [r1, #12]
 8000728:	fa07 fc0a 	lsl.w	ip, r7, sl
 800072c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000730:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000732:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000734:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000738:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800073c:	409f      	lsls	r7, r3
 800073e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000742:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000744:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000746:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000748:	688f      	ldr	r7, [r1, #8]
 800074a:	fa07 f70a 	lsl.w	r7, r7, sl
 800074e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000750:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000752:	00e5      	lsls	r5, r4, #3
 8000754:	d561      	bpl.n	800081a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	f04f 0b00 	mov.w	fp, #0
 800075a:	f8cd b00c 	str.w	fp, [sp, #12]
 800075e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000762:	4d39      	ldr	r5, [pc, #228]	; (8000848 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000764:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000768:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800076c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000770:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000774:	9703      	str	r7, [sp, #12]
 8000776:	9f03      	ldr	r7, [sp, #12]
 8000778:	f023 0703 	bic.w	r7, r3, #3
 800077c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000780:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000784:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000788:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000790:	f04f 0e0f 	mov.w	lr, #15
 8000794:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000798:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800079a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079e:	d043      	beq.n	8000828 <HAL_GPIO_Init+0x194>
 80007a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a4:	42a8      	cmp	r0, r5
 80007a6:	d041      	beq.n	800082c <HAL_GPIO_Init+0x198>
 80007a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ac:	42a8      	cmp	r0, r5
 80007ae:	d03f      	beq.n	8000830 <HAL_GPIO_Init+0x19c>
 80007b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b4:	42a8      	cmp	r0, r5
 80007b6:	d03d      	beq.n	8000834 <HAL_GPIO_Init+0x1a0>
 80007b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007bc:	42a8      	cmp	r0, r5
 80007be:	d03b      	beq.n	8000838 <HAL_GPIO_Init+0x1a4>
 80007c0:	4548      	cmp	r0, r9
 80007c2:	d03b      	beq.n	800083c <HAL_GPIO_Init+0x1a8>
 80007c4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007c8:	42a8      	cmp	r0, r5
 80007ca:	d039      	beq.n	8000840 <HAL_GPIO_Init+0x1ac>
 80007cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d0:	42a8      	cmp	r0, r5
 80007d2:	bf14      	ite	ne
 80007d4:	2508      	movne	r5, #8
 80007d6:	2507      	moveq	r5, #7
 80007d8:	fa05 f50c 	lsl.w	r5, r5, ip
 80007dc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007e0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007e2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007e4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007e6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007ea:	bf0c      	ite	eq
 80007ec:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ee:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007f0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007f2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007f4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007f8:	bf0c      	ite	eq
 80007fa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007fc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007fe:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000800:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000802:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000806:	bf0c      	ite	eq
 8000808:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800080a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800080c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800080e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000810:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000812:	bf54      	ite	pl
 8000814:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000816:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000818:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081a:	3301      	adds	r3, #1
 800081c:	2b10      	cmp	r3, #16
 800081e:	f47f af44 	bne.w	80006aa <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000822:	b005      	add	sp, #20
 8000824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000828:	465d      	mov	r5, fp
 800082a:	e7d5      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 800082c:	2501      	movs	r5, #1
 800082e:	e7d3      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000830:	2502      	movs	r5, #2
 8000832:	e7d1      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000834:	2503      	movs	r5, #3
 8000836:	e7cf      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000838:	2504      	movs	r5, #4
 800083a:	e7cd      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 800083c:	2505      	movs	r5, #5
 800083e:	e7cb      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000840:	2506      	movs	r5, #6
 8000842:	e7c9      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000844:	40013c00 	.word	0x40013c00
 8000848:	40020000 	.word	0x40020000
 800084c:	40023800 	.word	0x40023800
 8000850:	40021400 	.word	0x40021400

08000854 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000854:	6903      	ldr	r3, [r0, #16]
 8000856:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000858:	bf14      	ite	ne
 800085a:	2001      	movne	r0, #1
 800085c:	2000      	moveq	r0, #0
 800085e:	4770      	bx	lr

08000860 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000860:	b10a      	cbz	r2, 8000866 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000862:	6181      	str	r1, [r0, #24]
 8000864:	4770      	bx	lr
 8000866:	0409      	lsls	r1, r1, #16
 8000868:	e7fb      	b.n	8000862 <HAL_GPIO_WritePin+0x2>

0800086a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800086a:	6943      	ldr	r3, [r0, #20]
 800086c:	4059      	eors	r1, r3
 800086e:	6141      	str	r1, [r0, #20]
 8000870:	4770      	bx	lr

08000872 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000872:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000876:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd); 
 8000878:	f890 0290 	ldrb.w	r0, [r0, #656]	; 0x290
{
 800087c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 8000880:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8000884:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd); 
 8000888:	2801      	cmp	r0, #1
 800088a:	d021      	beq.n	80008d0 <HAL_HCD_HC_Init+0x5e>
 800088c:	2001      	movs	r0, #1
 800088e:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000892:	2028      	movs	r0, #40	; 0x28
 8000894:	fb00 4001 	mla	r0, r0, r1, r4
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8000898:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 800089c:	09d5      	lsrs	r5, r2, #7
  hhcd->hc[ch_num].dev_addr = dev_address;
 800089e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 80008a2:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 80008a6:	f880 703f 	strb.w	r7, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 80008aa:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 80008ae:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 80008b2:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 80008b6:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40
  
  status =  USB_HC_Init(hhcd->Instance, 
 80008ba:	e88d 40c0 	stmia.w	sp, {r6, r7, lr}
 80008be:	6820      	ldr	r0, [r4, #0]
 80008c0:	f001 fbcc 	bl	800205c <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 80008c4:	2300      	movs	r3, #0
 80008c6:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  
  return status;
}
 80008ca:	b004      	add	sp, #16
 80008cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hhcd); 
 80008d0:	2002      	movs	r0, #2
 80008d2:	e7fa      	b.n	80008ca <HAL_HCD_HC_Init+0x58>

080008d4 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 80008d4:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 80008d8:	2b01      	cmp	r3, #1
{
 80008da:	b510      	push	{r4, lr}
 80008dc:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);   
 80008de:	d009      	beq.n	80008f4 <HAL_HCD_HC_Halt+0x20>
 80008e0:	2301      	movs	r3, #1
 80008e2:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 80008e6:	6800      	ldr	r0, [r0, #0]
 80008e8:	f001 fd71 	bl	80023ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  return status;
 80008f2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);   
 80008f4:	2002      	movs	r0, #2
}
 80008f6:	bd10      	pop	{r4, pc}

080008f8 <HAL_HCD_Init>:
{ 
 80008f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 80008fc:	4607      	mov	r7, r0
{ 
 80008fe:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 8000900:	b3a0      	cbz	r0, 800096c <HAL_HCD_Init+0x74>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000902:	2303      	movs	r3, #3
  __HAL_HCD_DISABLE(hhcd);
 8000904:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000906:	f880 3291 	strb.w	r3, [r0, #657]	; 0x291
  HAL_HCD_MspInit(hhcd);
 800090a:	f003 f805 	bl	8003918 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 800090e:	f854 0b10 	ldr.w	r0, [r4], #16
 8000912:	f001 fa4e 	bl	8001db2 <USB_DisableGlobalInt>
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000918:	466d      	mov	r5, sp
 800091a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800091c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800091e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000920:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000924:	e885 0003 	stmia.w	r5, {r0, r1}
 8000928:	f107 0804 	add.w	r8, r7, #4
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 800092c:	463e      	mov	r6, r7
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 800092e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000932:	6838      	ldr	r0, [r7, #0]
 8000934:	f001 f9fd 	bl	8001d32 <USB_CoreInit>
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8000938:	f856 0b10 	ldr.w	r0, [r6], #16
 800093c:	2101      	movs	r1, #1
 800093e:	f001 fa3e 	bl	8001dbe <USB_SetCurrentMode>
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8000942:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000944:	466d      	mov	r5, sp
 8000946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000948:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800094a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800094c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000950:	e885 0003 	stmia.w	r5, {r0, r1}
 8000954:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000958:	6838      	ldr	r0, [r7, #0]
 800095a:	f001 faab 	bl	8001eb4 <USB_HostInit>
  hhcd->State= HAL_HCD_STATE_READY;
 800095e:	2301      	movs	r3, #1
 8000960:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
  return HAL_OK;
 8000964:	2000      	movs	r0, #0
}
 8000966:	b00a      	add	sp, #40	; 0x28
 8000968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800096c:	2001      	movs	r0, #1
 800096e:	e7fa      	b.n	8000966 <HAL_HCD_Init+0x6e>

08000970 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 8000970:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 8000972:	2628      	movs	r6, #40	; 0x28
 8000974:	fb06 0601 	mla	r6, r6, r1, r0
{
 8000978:	f89d e014 	ldrb.w	lr, [sp, #20]
 800097c:	9d06      	ldr	r5, [sp, #24]
 800097e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8000982:	f89d 7020 	ldrb.w	r7, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000986:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type; 
 800098a:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
  
  if(token == 0)
 800098e:	f1be 0f00 	cmp.w	lr, #0
 8000992:	d10e      	bne.n	80009b2 <HAL_HCD_HC_SubmitRequest+0x42>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000994:	f04f 0e03 	mov.w	lr, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 8000998:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800099a:	f886 e042 	strb.w	lr, [r6, #66]	; 0x42
  switch(ep_type)
 800099e:	d04a      	beq.n	8000a36 <HAL_HCD_HC_SubmitRequest+0xc6>
 80009a0:	4573      	cmp	r3, lr
 80009a2:	d055      	beq.n	8000a50 <HAL_HCD_HC_SubmitRequest+0xe0>
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d12f      	bne.n	8000a08 <HAL_HCD_HC_SubmitRequest+0x98>
      }
    }
    break;
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80009a8:	2328      	movs	r3, #40	; 0x28
 80009aa:	fb03 0301 	mla	r3, r3, r1, r0
 80009ae:	2200      	movs	r2, #0
 80009b0:	e055      	b.n	8000a5e <HAL_HCD_HC_SubmitRequest+0xee>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80009b2:	f04f 0c02 	mov.w	ip, #2
 80009b6:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch(ep_type)
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d824      	bhi.n	8000a08 <HAL_HCD_HC_SubmitRequest+0x98>
 80009be:	a601      	add	r6, pc, #4	; (adr r6, 80009c4 <HAL_HCD_HC_SubmitRequest+0x54>)
 80009c0:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 80009c4:	080009d5 	.word	0x080009d5
 80009c8:	080009a9 	.word	0x080009a9
 80009cc:	08000a37 	.word	0x08000a37
 80009d0:	08000a51 	.word	0x08000a51
    if((token == 1) && (direction == 0)) /*send data */
 80009d4:	f1be 0f01 	cmp.w	lr, #1
 80009d8:	d116      	bne.n	8000a08 <HAL_HCD_HC_SubmitRequest+0x98>
 80009da:	b9aa      	cbnz	r2, 8000a08 <HAL_HCD_HC_SubmitRequest+0x98>
      if (length == 0)
 80009dc:	b924      	cbnz	r4, 80009e8 <HAL_HCD_HC_SubmitRequest+0x78>
        hhcd->hc[ch_num].toggle_out = 1;
 80009de:	2328      	movs	r3, #40	; 0x28
 80009e0:	fb03 0301 	mla	r3, r3, r1, r0
 80009e4:	f883 e051 	strb.w	lr, [r3, #81]	; 0x51
      if (hhcd->hc[ch_num].toggle_out == 0)
 80009e8:	2328      	movs	r3, #40	; 0x28
 80009ea:	fb03 0201 	mla	r2, r3, r1, r0
 80009ee:	f892 6051 	ldrb.w	r6, [r2, #81]	; 0x51
 80009f2:	b9f6      	cbnz	r6, 8000a32 <HAL_HCD_HC_SubmitRequest+0xc2>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80009f4:	f882 6042 	strb.w	r6, [r2, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 80009f8:	fb03 0301 	mla	r3, r3, r1, r0
 80009fc:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000a00:	2a02      	cmp	r2, #2
 8000a02:	d001      	beq.n	8000a08 <HAL_HCD_HC_SubmitRequest+0x98>
        hhcd->hc[ch_num].do_ping = do_ping;
 8000a04:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    break;  
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000a08:	2628      	movs	r6, #40	; 0x28
 8000a0a:	fb06 0301 	mla	r3, r6, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8000a0e:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0;
  hhcd->hc[ch_num].ch_num = ch_num;
 8000a10:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000a14:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000a16:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8000a18:	649c      	str	r4, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8000a1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0;
 8000a1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8000a20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000a24:	3138      	adds	r1, #56	; 0x38
 8000a26:	7c02      	ldrb	r2, [r0, #16]
 8000a28:	6800      	ldr	r0, [r0, #0]
}
 8000a2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000a2e:	f001 bb81 	b.w	8002134 <USB_HC_StartXfer>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000a32:	2602      	movs	r6, #2
 8000a34:	e7de      	b.n	80009f4 <HAL_HCD_HC_SubmitRequest+0x84>
 8000a36:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000a38:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8000a3c:	b992      	cbnz	r2, 8000a64 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000a3e:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8000a42:	b91e      	cbnz	r6, 8000a4c <HAL_HCD_HC_SubmitRequest+0xdc>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8000a48:	2328      	movs	r3, #40	; 0x28
 8000a4a:	e7d5      	b.n	80009f8 <HAL_HCD_HC_SubmitRequest+0x88>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	e7f9      	b.n	8000a44 <HAL_HCD_HC_SubmitRequest+0xd4>
 8000a50:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000a52:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8000a56:	b92a      	cbnz	r2, 8000a64 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000a58:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8000a5c:	b936      	cbnz	r6, 8000a6c <HAL_HCD_HC_SubmitRequest+0xfc>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;  
 8000a62:	e7d1      	b.n	8000a08 <HAL_HCD_HC_SubmitRequest+0x98>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8000a64:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000a68:	2a00      	cmp	r2, #0
 8000a6a:	d0f8      	beq.n	8000a5e <HAL_HCD_HC_SubmitRequest+0xee>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	e7f6      	b.n	8000a5e <HAL_HCD_HC_SubmitRequest+0xee>

08000a70 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000a74:	6806      	ldr	r6, [r0, #0]
{
 8000a76:	b087      	sub	sp, #28
 8000a78:	4604      	mov	r4, r0
  uint32_t i = 0U , interrupt = 0U;
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000a7a:	4630      	mov	r0, r6
 8000a7c:	f001 f9fe 	bl	8001e7c <USB_GetMode>
 8000a80:	2801      	cmp	r0, #1
 8000a82:	f040 80ec 	bne.w	8000c5e <HAL_HCD_IRQHandler+0x1ee>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8000a86:	6820      	ldr	r0, [r4, #0]
 8000a88:	f001 f9f4 	bl	8001e74 <USB_ReadInterrupts>
 8000a8c:	2800      	cmp	r0, #0
 8000a8e:	f000 80e6 	beq.w	8000c5e <HAL_HCD_IRQHandler+0x1ee>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000a92:	6820      	ldr	r0, [r4, #0]
 8000a94:	f001 f9ee 	bl	8001e74 <USB_ReadInterrupts>
 8000a98:	0281      	lsls	r1, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000a9a:	bf48      	it	mi
 8000a9c:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000a9e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000aa0:	bf44      	itt	mi
 8000aa2:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8000aa6:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000aa8:	f001 f9e4 	bl	8001e74 <USB_ReadInterrupts>
 8000aac:	02c2      	lsls	r2, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000aae:	bf48      	it	mi
 8000ab0:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000ab2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000ab4:	bf44      	itt	mi
 8000ab6:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8000aba:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000abc:	f001 f9da 	bl	8001e74 <USB_ReadInterrupts>
 8000ac0:	0143      	lsls	r3, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000ac2:	bf48      	it	mi
 8000ac4:	6823      	ldrmi	r3, [r4, #0]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000ac6:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000ac8:	bf44      	itt	mi
 8000aca:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8000ace:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000ad0:	f001 f9d0 	bl	8001e74 <USB_ReadInterrupts>
 8000ad4:	0787      	lsls	r7, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000ad6:	bf48      	it	mi
 8000ad8:	6823      	ldrmi	r3, [r4, #0]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000ada:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000adc:	bf44      	itt	mi
 8000ade:	2202      	movmi	r2, #2
 8000ae0:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000ae2:	f001 f9c7 	bl	8001e74 <USB_ReadInterrupts>
 8000ae6:	0085      	lsls	r5, r0, #2
 8000ae8:	d510      	bpl.n	8000b0c <HAL_HCD_IRQHandler+0x9c>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000aea:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8000aee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000af2:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8000af6:	4620      	mov	r0, r4
 8000af8:	f002 ff50 	bl	800399c <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8000afc:	2101      	movs	r1, #1
 8000afe:	6820      	ldr	r0, [r4, #0]
 8000b00:	f001 fa4a 	bl	8001f98 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b0a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000b0c:	6820      	ldr	r0, [r4, #0]
 8000b0e:	f001 f9b1 	bl	8001e74 <USB_ReadInterrupts>
 8000b12:	01c0      	lsls	r0, r0, #7
 8000b14:	d540      	bpl.n	8000b98 <HAL_HCD_IRQHandler+0x128>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8000b16:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000b18:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000b1c:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8000b1e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000b22:	9305      	str	r3, [sp, #20]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000b24:	9b05      	ldr	r3, [sp, #20]
 8000b26:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000b2a:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000b2c:	9b04      	ldr	r3, [sp, #16]
 8000b2e:	0799      	lsls	r1, r3, #30
 8000b30:	d50d      	bpl.n	8000b4e <HAL_HCD_IRQHandler+0xde>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000b32:	9b04      	ldr	r3, [sp, #16]
 8000b34:	07da      	lsls	r2, r3, #31
 8000b36:	d506      	bpl.n	8000b46 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000b38:	69ab      	ldr	r3, [r5, #24]
 8000b3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000b3e:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8000b40:	4620      	mov	r0, r4
 8000b42:	f002 ff27 	bl	8003994 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8000b46:	9b05      	ldr	r3, [sp, #20]
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	9305      	str	r3, [sp, #20]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000b4e:	9b04      	ldr	r3, [sp, #16]
 8000b50:	071b      	lsls	r3, r3, #28
 8000b52:	d517      	bpl.n	8000b84 <HAL_HCD_IRQHandler+0x114>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000b54:	9b05      	ldr	r3, [sp, #20]
 8000b56:	f043 0308 	orr.w	r3, r3, #8
 8000b5a:	9305      	str	r3, [sp, #20]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000b5c:	9b04      	ldr	r3, [sp, #16]
 8000b5e:	075f      	lsls	r7, r3, #29
 8000b60:	f140 8088 	bpl.w	8000c74 <HAL_HCD_IRQHandler+0x204>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000b64:	69a1      	ldr	r1, [r4, #24]
 8000b66:	2902      	cmp	r1, #2
 8000b68:	d17c      	bne.n	8000c64 <HAL_HCD_IRQHandler+0x1f4>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8000b6a:	9b04      	ldr	r3, [sp, #16]
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8000b6c:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8000b6e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8000b76:	bf18      	it	ne
 8000b78:	2101      	movne	r1, #1
 8000b7a:	f001 fa0d 	bl	8001f98 <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8000b7e:	4620      	mov	r0, r4
 8000b80:	f002 ff08 	bl	8003994 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000b84:	9b04      	ldr	r3, [sp, #16]
 8000b86:	0698      	lsls	r0, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000b88:	bf42      	ittt	mi
 8000b8a:	9b05      	ldrmi	r3, [sp, #20]
 8000b8c:	f043 0320 	orrmi.w	r3, r3, #32
 8000b90:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000b92:	9b05      	ldr	r3, [sp, #20]
 8000b94:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000b98:	6820      	ldr	r0, [r4, #0]
 8000b9a:	f001 f96b 	bl	8001e74 <USB_ReadInterrupts>
 8000b9e:	0701      	lsls	r1, r0, #28
 8000ba0:	d505      	bpl.n	8000bae <HAL_HCD_IRQHandler+0x13e>
      HAL_HCD_SOF_Callback(hhcd);
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f002 fef2 	bl	800398c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000ba8:	6823      	ldr	r3, [r4, #0]
 8000baa:	2208      	movs	r2, #8
 8000bac:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000bae:	6820      	ldr	r0, [r4, #0]
 8000bb0:	f001 f960 	bl	8001e74 <USB_ReadInterrupts>
 8000bb4:	0182      	lsls	r2, r0, #6
 8000bb6:	d514      	bpl.n	8000be2 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000bb8:	6820      	ldr	r0, [r4, #0]
 8000bba:	f001 fbf9 	bl	80023b0 <USB_HC_ReadInterrupt>
 8000bbe:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8000bc2:	9002      	str	r0, [sp, #8]
 8000bc4:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000bc6:	f04f 0b00 	mov.w	fp, #0
        if (interrupt & (1U << i))
 8000bca:	f04f 0a01 	mov.w	sl, #1
    if(hhcd->hc[chnum].state == HC_XFRC)
 8000bce:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8000bd0:	f04f 0902 	mov.w	r9, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000bd4:	68a3      	ldr	r3, [r4, #8]
 8000bd6:	459b      	cmp	fp, r3
 8000bd8:	d358      	bcc.n	8000c8c <HAL_HCD_IRQHandler+0x21c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000be0:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8000be2:	6820      	ldr	r0, [r4, #0]
 8000be4:	f001 f946 	bl	8001e74 <USB_ReadInterrupts>
 8000be8:	06c3      	lsls	r3, r0, #27
 8000bea:	d538      	bpl.n	8000c5e <HAL_HCD_IRQHandler+0x1ee>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bec:	6825      	ldr	r5, [r4, #0]
 8000bee:	69ab      	ldr	r3, [r5, #24]
 8000bf0:	f023 0310 	bic.w	r3, r3, #16
 8000bf4:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP;
 8000bf6:	6a2f      	ldr	r7, [r5, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8000bf8:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d129      	bne.n	8000c54 <HAL_HCD_IRQHandler+0x1e4>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000c00:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8000c04:	f1b8 0f00 	cmp.w	r8, #0
 8000c08:	d024      	beq.n	8000c54 <HAL_HCD_IRQHandler+0x1e4>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8000c0a:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8000c0e:	2628      	movs	r6, #40	; 0x28
 8000c10:	fb06 4607 	mla	r6, r6, r7, r4
 8000c14:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000c16:	b1e9      	cbz	r1, 8000c54 <HAL_HCD_IRQHandler+0x1e4>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8000c18:	4642      	mov	r2, r8
 8000c1a:	4628      	mov	r0, r5
 8000c1c:	f001 f91c 	bl	8001e58 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8000c20:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000c22:	4443      	add	r3, r8
 8000c24:	6473      	str	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8000c26:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8000c2a:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8000c2c:	eb05 1547 	add.w	r5, r5, r7, lsl #5
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8000c30:	4443      	add	r3, r8
 8000c32:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8000c34:	692a      	ldr	r2, [r5, #16]
 8000c36:	4bb7      	ldr	r3, [pc, #732]	; (8000f14 <HAL_HCD_IRQHandler+0x4a4>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	b15b      	cbz	r3, 8000c54 <HAL_HCD_IRQHandler+0x1e4>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8000c3c:	682b      	ldr	r3, [r5, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8000c46:	602b      	str	r3, [r5, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8000c48:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8000c4c:	f083 0301 	eor.w	r3, r3, #1
 8000c50:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c54:	6822      	ldr	r2, [r4, #0]
 8000c56:	6993      	ldr	r3, [r2, #24]
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	6193      	str	r3, [r2, #24]
}
 8000c5e:	b007      	add	sp, #28
 8000c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8000c64:	68e3      	ldr	r3, [r4, #12]
 8000c66:	2b03      	cmp	r3, #3
          USBx_HOST->HFIR = 60000U;
 8000c68:	bf04      	itt	eq
 8000c6a:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8000c6e:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8000c72:	e784      	b.n	8000b7e <HAL_HCD_IRQHandler+0x10e>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000c74:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8000c78:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000c7a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000c7e:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8000c82:	6993      	ldr	r3, [r2, #24]
 8000c84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c88:	6193      	str	r3, [r2, #24]
 8000c8a:	e77b      	b.n	8000b84 <HAL_HCD_IRQHandler+0x114>
        if (interrupt & (1U << i))
 8000c8c:	9a02      	ldr	r2, [sp, #8]
 8000c8e:	fa0a f30b 	lsl.w	r3, sl, fp
 8000c92:	4213      	tst	r3, r2
 8000c94:	f000 8086 	beq.w	8000da4 <HAL_HCD_IRQHandler+0x334>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8000c98:	9b01      	ldr	r3, [sp, #4]
 8000c9a:	6820      	ldr	r0, [r4, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000ca2:	fa5f f58b 	uxtb.w	r5, fp
 8000ca6:	f000 810a 	beq.w	8000ebe <HAL_HCD_IRQHandler+0x44e>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8000caa:	016a      	lsls	r2, r5, #5
 8000cac:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
 8000cb0:	eb02 0608 	add.w	r6, r2, r8
 8000cb4:	68b1      	ldr	r1, [r6, #8]
 8000cb6:	074b      	lsls	r3, r1, #29
 8000cb8:	d513      	bpl.n	8000ce2 <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000cba:	2104      	movs	r1, #4
 8000cbc:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000cbe:	68f1      	ldr	r1, [r6, #12]
 8000cc0:	f041 0102 	orr.w	r1, r1, #2
 8000cc4:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8000cc6:	68b1      	ldr	r1, [r6, #8]
 8000cc8:	058b      	lsls	r3, r1, #22
 8000cca:	d53d      	bpl.n	8000d48 <HAL_HCD_IRQHandler+0x2d8>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000ccc:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000cce:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000cd6:	4629      	mov	r1, r5
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000cd8:	f001 fb79 	bl	80023ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8000cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce0:	e12b      	b.n	8000f3a <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8000ce2:	68b1      	ldr	r1, [r6, #8]
 8000ce4:	0689      	lsls	r1, r1, #26
 8000ce6:	d502      	bpl.n	8000cee <HAL_HCD_IRQHandler+0x27e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000ce8:	2120      	movs	r1, #32
 8000cea:	60b1      	str	r1, [r6, #8]
 8000cec:	e7eb      	b.n	8000cc6 <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8000cee:	68b1      	ldr	r1, [r6, #8]
 8000cf0:	070b      	lsls	r3, r1, #28
 8000cf2:	d513      	bpl.n	8000d1c <HAL_HCD_IRQHandler+0x2ac>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000cf4:	68f1      	ldr	r1, [r6, #12]
 8000cf6:	9203      	str	r2, [sp, #12]
 8000cf8:	f041 0102 	orr.w	r1, r1, #2
 8000cfc:	60f1      	str	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8000cfe:	fb07 4105 	mla	r1, r7, r5, r4
 8000d02:	f04f 0e05 	mov.w	lr, #5
 8000d06:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8000d0e:	2108      	movs	r1, #8
 8000d10:	60b1      	str	r1, [r6, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8000d12:	4629      	mov	r1, r5
 8000d14:	f001 fb5b 	bl	80023ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8000d18:	9a03      	ldr	r2, [sp, #12]
 8000d1a:	e7d4      	b.n	8000cc6 <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8000d1c:	68b1      	ldr	r1, [r6, #8]
 8000d1e:	0549      	lsls	r1, r1, #21
 8000d20:	d5d1      	bpl.n	8000cc6 <HAL_HCD_IRQHandler+0x256>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000d22:	68f1      	ldr	r1, [r6, #12]
 8000d24:	9203      	str	r2, [sp, #12]
 8000d26:	f041 0102 	orr.w	r1, r1, #2
 8000d2a:	60f1      	str	r1, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000d2c:	4629      	mov	r1, r5
 8000d2e:	f001 fb4e 	bl	80023ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8000d32:	2110      	movs	r1, #16
 8000d34:	60b1      	str	r1, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8000d36:	fb07 4105 	mla	r1, r7, r5, r4
 8000d3a:	2008      	movs	r0, #8
 8000d3c:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8000d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d44:	60b1      	str	r1, [r6, #8]
 8000d46:	e7e7      	b.n	8000d18 <HAL_HCD_IRQHandler+0x2a8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8000d48:	68b1      	ldr	r1, [r6, #8]
 8000d4a:	07c8      	lsls	r0, r1, #31
 8000d4c:	d540      	bpl.n	8000dd0 <HAL_HCD_IRQHandler+0x360>
    if (hhcd->Init.dma_enable)
 8000d4e:	6921      	ldr	r1, [r4, #16]
 8000d50:	b149      	cbz	r1, 8000d66 <HAL_HCD_IRQHandler+0x2f6>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000d52:	fb07 4e05 	mla	lr, r7, r5, r4
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000d56:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000d58:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000d5c:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000d60:	1a09      	subs	r1, r1, r0
 8000d62:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 8000d66:	fb07 4105 	mla	r1, r7, r5, r4
    hhcd->hc[chnum].ErrCnt = 0U;
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XFRC;
 8000d6e:	f881 a05d 	strb.w	sl, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8000d72:	f8c6 a008 	str.w	sl, [r6, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8000d76:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 8000d7a:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8000d7e:	d117      	bne.n	8000db0 <HAL_HCD_IRQHandler+0x340>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000d80:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8000d82:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	f001 fb1f 	bl	80023ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000d90:	2310      	movs	r3, #16
 8000d92:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].toggle_in ^= 1U;
 8000d94:	fb07 4505 	mla	r5, r7, r5, r4
 8000d98:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8000d9c:	f083 0301 	eor.w	r3, r3, #1
 8000da0:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 8000da4:	9b01      	ldr	r3, [sp, #4]
 8000da6:	3320      	adds	r3, #32
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000da8:	f10b 0b01 	add.w	fp, fp, #1
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	e711      	b.n	8000bd4 <HAL_HCD_IRQHandler+0x164>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8000db0:	2803      	cmp	r0, #3
 8000db2:	d1ef      	bne.n	8000d94 <HAL_HCD_IRQHandler+0x324>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000db4:	f852 0008 	ldr.w	r0, [r2, r8]
 8000db8:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8000dbc:	f842 0008 	str.w	r0, [r2, r8]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8000dc0:	f881 a05c 	strb.w	sl, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4629      	mov	r1, r5
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f002 fdeb 	bl	80039a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000dce:	e7e1      	b.n	8000d94 <HAL_HCD_IRQHandler+0x324>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8000dd0:	68b1      	ldr	r1, [r6, #8]
 8000dd2:	0789      	lsls	r1, r1, #30
 8000dd4:	d535      	bpl.n	8000e42 <HAL_HCD_IRQHandler+0x3d2>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8000dd6:	68f1      	ldr	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8000dd8:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8000ddc:	f021 0102 	bic.w	r1, r1, #2
 8000de0:	60f1      	str	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8000de2:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8000de6:	2901      	cmp	r1, #1
 8000de8:	d10c      	bne.n	8000e04 <HAL_HCD_IRQHandler+0x394>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8000dea:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8000dee:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8000df2:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8000df6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f002 fdd1 	bl	80039a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000e02:	e7cf      	b.n	8000da4 <HAL_HCD_IRQHandler+0x334>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8000e04:	2905      	cmp	r1, #5
 8000e06:	d0f0      	beq.n	8000dea <HAL_HCD_IRQHandler+0x37a>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8000e08:	2906      	cmp	r1, #6
 8000e0a:	d001      	beq.n	8000e10 <HAL_HCD_IRQHandler+0x3a0>
 8000e0c:	2908      	cmp	r1, #8
 8000e0e:	d1ee      	bne.n	8000dee <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8000e10:	fb07 4105 	mla	r1, r7, r5, r4
 8000e14:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8000e16:	2803      	cmp	r0, #3
 8000e18:	f100 0301 	add.w	r3, r0, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8000e1c:	bf88      	it	hi
 8000e1e:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8000e20:	658b      	str	r3, [r1, #88]	; 0x58
        hhcd->hc[chnum].ErrCnt = 0U;
 8000e22:	bf83      	ittte	hi
 8000e24:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8000e26:	2004      	movhi	r0, #4
 8000e28:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8000e2c:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8000e30:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000e34:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000e38:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8000e3c:	f842 1008 	str.w	r1, [r2, r8]
 8000e40:	e7d5      	b.n	8000dee <HAL_HCD_IRQHandler+0x37e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8000e42:	68b1      	ldr	r1, [r6, #8]
 8000e44:	060b      	lsls	r3, r1, #24
 8000e46:	d511      	bpl.n	8000e6c <HAL_HCD_IRQHandler+0x3fc>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000e48:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);     
 8000e4a:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	60f3      	str	r3, [r6, #12]
    hhcd->hc[chnum].ErrCnt++;
 8000e52:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);     
 8000e56:	4629      	mov	r1, r5
    hhcd->hc[chnum].ErrCnt++;
 8000e58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e5a:	3201      	adds	r2, #1
 8000e5c:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 8000e5e:	2206      	movs	r2, #6
 8000e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 8000e64:	f001 fab3 	bl	80023ce <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	e066      	b.n	8000f3a <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8000e6c:	68b1      	ldr	r1, [r6, #8]
 8000e6e:	06c8      	lsls	r0, r1, #27
 8000e70:	d598      	bpl.n	8000da4 <HAL_HCD_IRQHandler+0x334>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8000e72:	fb07 4105 	mla	r1, r7, r5, r4
 8000e76:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 8000e7a:	2903      	cmp	r1, #3
 8000e7c:	d109      	bne.n	8000e92 <HAL_HCD_IRQHandler+0x422>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000e7e:	68f1      	ldr	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8000e80:	6820      	ldr	r0, [r4, #0]
 8000e82:	9203      	str	r2, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000e84:	f041 0102 	orr.w	r1, r1, #2
 8000e88:	60f1      	str	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8000e8a:	4629      	mov	r1, r5
 8000e8c:	f001 fa9f 	bl	80023ce <USB_HC_Halt>
 8000e90:	9a03      	ldr	r2, [sp, #12]
    hhcd->hc[chnum].state = HC_NAK;
 8000e92:	fb07 4505 	mla	r5, r7, r5, r4
 8000e96:	2103      	movs	r1, #3
 8000e98:	f885 105d 	strb.w	r1, [r5, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	60b1      	str	r1, [r6, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8000ea0:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
 8000ea4:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8000ea8:	f47f af7c 	bne.w	8000da4 <HAL_HCD_IRQHandler+0x334>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8000eac:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000eb0:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000eb4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8000eb8:	f842 1008 	str.w	r1, [r2, r8]
 8000ebc:	e772      	b.n	8000da4 <HAL_HCD_IRQHandler+0x334>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8000ebe:	f500 66a0 	add.w	r6, r0, #1280	; 0x500
 8000ec2:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8000ec6:	68b3      	ldr	r3, [r6, #8]
 8000ec8:	0759      	lsls	r1, r3, #29
 8000eca:	d506      	bpl.n	8000eda <HAL_HCD_IRQHandler+0x46a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000ecc:	2304      	movs	r3, #4
 8000ece:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000ed0:	68f3      	ldr	r3, [r6, #12]
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	60f3      	str	r3, [r6, #12]
 8000ed8:	e764      	b.n	8000da4 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8000eda:	68b3      	ldr	r3, [r6, #8]
 8000edc:	f013 0320 	ands.w	r3, r3, #32
 8000ee0:	d01a      	beq.n	8000f18 <HAL_HCD_IRQHandler+0x4a8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	60b3      	str	r3, [r6, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8000ee6:	fb07 4305 	mla	r3, r7, r5, r4
 8000eea:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000eee:	2a01      	cmp	r2, #1
 8000ef0:	f47f af58 	bne.w	8000da4 <HAL_HCD_IRQHandler+0x334>
      hhcd->hc[chnum].state = HC_NYET;     
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000efa:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].state = HC_NYET;     
 8000efc:	9303      	str	r3, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000efe:	f042 0202 	orr.w	r2, r2, #2
 8000f02:	60f2      	str	r2, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8000f04:	4629      	mov	r1, r5
 8000f06:	f001 fa62 	bl	80023ce <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8000f0a:	9b03      	ldr	r3, [sp, #12]
 8000f0c:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8000f10:	e748      	b.n	8000da4 <HAL_HCD_IRQHandler+0x334>
 8000f12:	bf00      	nop
 8000f14:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8000f18:	68b2      	ldr	r2, [r6, #8]
 8000f1a:	0652      	lsls	r2, r2, #25
 8000f1c:	d50f      	bpl.n	8000f3e <HAL_HCD_IRQHandler+0x4ce>
    hhcd->hc[chnum].state = HC_NYET;
 8000f1e:	fb07 4205 	mla	r2, r7, r5, r4
 8000f22:	2104      	movs	r1, #4
    hhcd->hc[chnum].ErrCnt= 0U;    
 8000f24:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f26:	68f3      	ldr	r3, [r6, #12]
    hhcd->hc[chnum].state = HC_NYET;
 8000f28:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8000f32:	4629      	mov	r1, r5
 8000f34:	f001 fa4b 	bl	80023ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8000f38:	2340      	movs	r3, #64	; 0x40
 8000f3a:	60b3      	str	r3, [r6, #8]
 8000f3c:	e732      	b.n	8000da4 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8000f3e:	68b2      	ldr	r2, [r6, #8]
 8000f40:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8000f44:	d005      	beq.n	8000f52 <HAL_HCD_IRQHandler+0x4e2>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f46:	68f3      	ldr	r3, [r6, #12]
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000f4e:	4629      	mov	r1, r5
 8000f50:	e6c2      	b.n	8000cd8 <HAL_HCD_IRQHandler+0x268>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8000f52:	68b3      	ldr	r3, [r6, #8]
 8000f54:	07d9      	lsls	r1, r3, #31
 8000f56:	d510      	bpl.n	8000f7a <HAL_HCD_IRQHandler+0x50a>
      hhcd->hc[chnum].ErrCnt = 0U;  
 8000f58:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);   
 8000f5c:	4629      	mov	r1, r5
      hhcd->hc[chnum].ErrCnt = 0U;  
 8000f5e:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000f60:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].ErrCnt = 0U;  
 8000f62:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000f64:	f042 0202 	orr.w	r2, r2, #2
 8000f68:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8000f6a:	f001 fa30 	bl	80023ce <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 8000f6e:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8000f70:	f8c6 a008 	str.w	sl, [r6, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8000f74:	f883 a05d 	strb.w	sl, [r3, #93]	; 0x5d
 8000f78:	e714      	b.n	8000da4 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8000f7a:	68b3      	ldr	r3, [r6, #8]
 8000f7c:	071a      	lsls	r2, r3, #28
 8000f7e:	d50e      	bpl.n	8000f9e <HAL_HCD_IRQHandler+0x52e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8000f80:	2308      	movs	r3, #8
 8000f82:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000f84:	68f3      	ldr	r3, [r6, #12]
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	f001 fa1e 	bl	80023ce <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8000f92:	fb07 4505 	mla	r5, r7, r5, r4
 8000f96:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8000f98:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8000f9c:	e702      	b.n	8000da4 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8000f9e:	68b3      	ldr	r3, [r6, #8]
 8000fa0:	06db      	lsls	r3, r3, #27
 8000fa2:	d511      	bpl.n	8000fc8 <HAL_HCD_IRQHandler+0x558>
    hhcd->hc[chnum].ErrCnt = 0U;  
 8000fa4:	fb07 4305 	mla	r3, r7, r5, r4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000fac:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[chnum].ErrCnt = 0U;  
 8000fae:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000fb0:	f042 0202 	orr.w	r2, r2, #2
 8000fb4:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	f001 fa09 	bl	80023ce <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8000fbc:	9b03      	ldr	r3, [sp, #12]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	e7b8      	b.n	8000f3a <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8000fc8:	68b3      	ldr	r3, [r6, #8]
 8000fca:	0619      	lsls	r1, r3, #24
 8000fcc:	d50c      	bpl.n	8000fe8 <HAL_HCD_IRQHandler+0x578>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000fce:	68f3      	ldr	r3, [r6, #12]
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8000fd6:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_XACTERR;  
 8000fd8:	fb07 4505 	mla	r5, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);      
 8000fdc:	f001 f9f7 	bl	80023ce <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8000fe6:	e73f      	b.n	8000e68 <HAL_HCD_IRQHandler+0x3f8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8000fe8:	68b1      	ldr	r1, [r6, #8]
 8000fea:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8000fee:	d00f      	beq.n	8001010 <HAL_HCD_IRQHandler+0x5a0>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000ff0:	68f3      	ldr	r3, [r6, #12]
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8000ff8:	4629      	mov	r1, r5
 8000ffa:	f001 f9e8 	bl	80023ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000ffe:	2310      	movs	r3, #16
 8001000:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8001002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001006:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001008:	fb07 4505 	mla	r5, r7, r5, r4
 800100c:	2308      	movs	r3, #8
 800100e:	e7c3      	b.n	8000f98 <HAL_HCD_IRQHandler+0x528>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8001010:	68b3      	ldr	r3, [r6, #8]
 8001012:	079a      	lsls	r2, r3, #30
 8001014:	f57f aec6 	bpl.w	8000da4 <HAL_HCD_IRQHandler+0x334>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001018:	68f3      	ldr	r3, [r6, #12]
 800101a:	f023 0302 	bic.w	r3, r3, #2
 800101e:	60f3      	str	r3, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001020:	fb07 4305 	mla	r3, r7, r5, r4
 8001024:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8001028:	2a01      	cmp	r2, #1
 800102a:	d10d      	bne.n	8001048 <HAL_HCD_IRQHandler+0x5d8>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 800102c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8001030:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001034:	2a02      	cmp	r2, #2
 8001036:	f47f aeda 	bne.w	8000dee <HAL_HCD_IRQHandler+0x37e>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 800103a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800103e:	f082 0201 	eor.w	r2, r2, #1
 8001042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001046:	e6d2      	b.n	8000dee <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8001048:	2a03      	cmp	r2, #3
 800104a:	d102      	bne.n	8001052 <HAL_HCD_IRQHandler+0x5e2>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800104c:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8001050:	e6cd      	b.n	8000dee <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8001052:	2a04      	cmp	r2, #4
 8001054:	d104      	bne.n	8001060 <HAL_HCD_IRQHandler+0x5f0>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001056:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 800105a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 800105e:	e6c6      	b.n	8000dee <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8001060:	2a05      	cmp	r2, #5
 8001062:	d102      	bne.n	800106a <HAL_HCD_IRQHandler+0x5fa>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001064:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001068:	e6c1      	b.n	8000dee <HAL_HCD_IRQHandler+0x37e>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 800106a:	2a06      	cmp	r2, #6
 800106c:	d002      	beq.n	8001074 <HAL_HCD_IRQHandler+0x604>
 800106e:	2a08      	cmp	r2, #8
 8001070:	f47f aebd 	bne.w	8000dee <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001074:	fb07 4305 	mla	r3, r7, r5, r4
 8001078:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800107a:	1c51      	adds	r1, r2, #1
 800107c:	2a03      	cmp	r2, #3
 800107e:	6599      	str	r1, [r3, #88]	; 0x58
 8001080:	d9e4      	bls.n	800104c <HAL_HCD_IRQHandler+0x5dc>
        hhcd->hc[chnum].ErrCnt = 0U;
 8001082:	2200      	movs	r2, #0
 8001084:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001086:	2204      	movs	r2, #4
 8001088:	e7ec      	b.n	8001064 <HAL_HCD_IRQHandler+0x5f4>
 800108a:	bf00      	nop

0800108c <HAL_HCD_Start>:
{ 
 800108c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 800108e:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001092:	2b01      	cmp	r3, #1
{ 
 8001094:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8001096:	d00d      	beq.n	80010b4 <HAL_HCD_Start+0x28>
 8001098:	2501      	movs	r5, #1
 800109a:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 800109e:	6800      	ldr	r0, [r0, #0]
 80010a0:	f000 fe81 	bl	8001da6 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 80010a4:	4629      	mov	r1, r5
 80010a6:	6820      	ldr	r0, [r4, #0]
 80010a8:	f000 ffac 	bl	8002004 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 80010ac:	2000      	movs	r0, #0
 80010ae:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd); 
 80010b4:	2002      	movs	r0, #2
}
 80010b6:	bd38      	pop	{r3, r4, r5, pc}

080010b8 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd); 
 80010b8:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 80010bc:	2b01      	cmp	r3, #1
{ 
 80010be:	b510      	push	{r4, lr}
 80010c0:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 80010c2:	d009      	beq.n	80010d8 <HAL_HCD_Stop+0x20>
 80010c4:	2301      	movs	r3, #1
 80010c6:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 80010ca:	6800      	ldr	r0, [r0, #0]
 80010cc:	f001 faa4 	bl	8002618 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 80010d0:	2000      	movs	r0, #0
 80010d2:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 80010d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd); 
 80010d8:	2002      	movs	r0, #2
}
 80010da:	bd10      	pop	{r4, pc}

080010dc <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 80010dc:	6800      	ldr	r0, [r0, #0]
 80010de:	f000 bf78 	b.w	8001fd2 <USB_ResetPort>

080010e2 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 80010e2:	2328      	movs	r3, #40	; 0x28
 80010e4:	fb03 0101 	mla	r1, r3, r1, r0
}
 80010e8:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 80010ec:	4770      	bx	lr

080010ee <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count; 
 80010ee:	2328      	movs	r3, #40	; 0x28
 80010f0:	fb03 0101 	mla	r1, r3, r1, r0
}
 80010f4:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80010f6:	4770      	bx	lr

080010f8 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80010f8:	6800      	ldr	r0, [r0, #0]
 80010fa:	f000 bfaa 	b.w	8002052 <USB_GetCurrentFrame>

080010fe <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 80010fe:	6800      	ldr	r0, [r0, #0]
 8001100:	f000 bf9e 	b.w	8002040 <USB_GetHostSpeed>

08001104 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001104:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001106:	4604      	mov	r4, r0
 8001108:	2800      	cmp	r0, #0
 800110a:	d062      	beq.n	80011d2 <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800110c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001110:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001114:	b91b      	cbnz	r3, 800111e <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001116:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800111a:	f002 fb11 	bl	8003740 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800111e:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001120:	4e2d      	ldr	r6, [pc, #180]	; (80011d8 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001122:	4d2e      	ldr	r5, [pc, #184]	; (80011dc <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001124:	2324      	movs	r3, #36	; 0x24
 8001126:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800112a:	6813      	ldr	r3, [r2, #0]
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001132:	f000 fceb 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001136:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001138:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800113a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800113e:	42b3      	cmp	r3, r6
 8001140:	bf84      	itt	hi
 8001142:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001146:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001148:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800114a:	bf91      	iteee	ls
 800114c:	1c69      	addls	r1, r5, #1
 800114e:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001152:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001156:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001158:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800115a:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800115c:	d821      	bhi.n	80011a2 <HAL_I2C_Init+0x9e>
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fbb0 f0f3 	udiv	r0, r0, r3
 8001164:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001168:	2b03      	cmp	r3, #3
 800116a:	bf98      	it	ls
 800116c:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800116e:	6a21      	ldr	r1, [r4, #32]
 8001170:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001172:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001174:	430b      	orrs	r3, r1
 8001176:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001178:	68e1      	ldr	r1, [r4, #12]
 800117a:	6923      	ldr	r3, [r4, #16]
 800117c:	430b      	orrs	r3, r1
 800117e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001180:	69a1      	ldr	r1, [r4, #24]
 8001182:	6963      	ldr	r3, [r4, #20]
 8001184:	430b      	orrs	r3, r1
 8001186:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001188:	6813      	ldr	r3, [r2, #0]
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001190:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001192:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001194:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001196:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800119a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800119c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80011a0:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80011a2:	68a1      	ldr	r1, [r4, #8]
 80011a4:	b949      	cbnz	r1, 80011ba <HAL_I2C_Init+0xb6>
 80011a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80011ae:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80011b2:	b163      	cbz	r3, 80011ce <HAL_I2C_Init+0xca>
 80011b4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80011b8:	e7d9      	b.n	800116e <HAL_I2C_Init+0x6a>
 80011ba:	2119      	movs	r1, #25
 80011bc:	434b      	muls	r3, r1
 80011be:	fbb0 f0f3 	udiv	r0, r0, r3
 80011c2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80011c6:	b113      	cbz	r3, 80011ce <HAL_I2C_Init+0xca>
 80011c8:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80011cc:	e7cf      	b.n	800116e <HAL_I2C_Init+0x6a>
 80011ce:	2001      	movs	r0, #1
 80011d0:	e7cd      	b.n	800116e <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 80011d2:	2001      	movs	r0, #1
}
 80011d4:	bd70      	pop	{r4, r5, r6, pc}
 80011d6:	bf00      	nop
 80011d8:	000186a0 	.word	0x000186a0
 80011dc:	000f4240 	.word	0x000f4240

080011e0 <HAL_I2S_TxCpltCallback>:
 80011e0:	4770      	bx	lr

080011e2 <HAL_I2S_RxCpltCallback>:
 80011e2:	4770      	bx	lr

080011e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
 __weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_I2S_Init>:
{
 80011e8:	b570      	push	{r4, r5, r6, lr}
  if(hi2s == NULL)
 80011ea:	4604      	mov	r4, r0
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d03f      	beq.n	8001270 <HAL_I2S_Init+0x88>
  hi2s->State = HAL_I2S_STATE_BUSY;
 80011f0:	2502      	movs	r5, #2
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 80011f2:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <HAL_I2S_Init+0x110>)
  hi2s->State = HAL_I2S_STATE_BUSY;
 80011f4:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 80011f8:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_I2S_MspInit(hi2s);
 80011fa:	f002 facb 	bl	8003794 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80011fe:	6822      	ldr	r2, [r4, #0]
 8001200:	69d3      	ldr	r3, [r2, #28]
 8001202:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001206:	f023 030f 	bic.w	r3, r3, #15
 800120a:	61d3      	str	r3, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800120c:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 800120e:	6215      	str	r5, [r2, #32]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001210:	2b02      	cmp	r3, #2
  tmpreg = hi2s->Instance->I2SCFGR;
 8001212:	69d5      	ldr	r5, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001214:	d035      	beq.n	8001282 <HAL_I2S_Init+0x9a>
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001216:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
 8001218:	2b00      	cmp	r3, #0
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800121a:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 800121c:	bf14      	ite	ne
 800121e:	2620      	movne	r6, #32
 8001220:	2610      	moveq	r6, #16
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001222:	2001      	movs	r0, #1
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001224:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8001226:	bf98      	it	ls
 8001228:	0076      	lslls	r6, r6, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800122a:	f000 fd17 	bl	8001c5c <HAL_RCCEx_GetPeriphCLKFreq>
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800122e:	6923      	ldr	r3, [r4, #16]
 8001230:	6961      	ldr	r1, [r4, #20]
 8001232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001236:	d11f      	bne.n	8001278 <HAL_I2S_Init+0x90>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001238:	68e3      	ldr	r3, [r4, #12]
 800123a:	220a      	movs	r2, #10
 800123c:	b1d3      	cbz	r3, 8001274 <HAL_I2S_Init+0x8c>
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 800123e:	00b3      	lsls	r3, r6, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001240:	fbb0 f3f3 	udiv	r3, r0, r3
 8001244:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 8001246:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8001248:	fbb3 f3f1 	udiv	r3, r3, r1
 800124c:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 800124e:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8001252:	f003 0201 	and.w	r2, r3, #1
    i2sodd = (uint32_t) (i2sodd << 8U);
 8001256:	0212      	lsls	r2, r2, #8
 8001258:	f3c3 034f 	ubfx	r3, r3, #1, #16
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800125c:	1e99      	subs	r1, r3, #2
 800125e:	29fd      	cmp	r1, #253	; 0xfd
 8001260:	d911      	bls.n	8001286 <HAL_I2S_Init+0x9e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001262:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001264:	f043 0310 	orr.w	r3, r3, #16
 8001268:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 800126a:	4620      	mov	r0, r4
 800126c:	f7ff ffba 	bl	80011e4 <HAL_I2S_ErrorCallback>
    return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
}
 8001272:	bd70      	pop	{r4, r5, r6, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001274:	00f3      	lsls	r3, r6, #3
 8001276:	e7e3      	b.n	8001240 <HAL_I2S_Init+0x58>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8001278:	230a      	movs	r3, #10
 800127a:	fbb0 f0f6 	udiv	r0, r0, r6
 800127e:	4343      	muls	r3, r0
 8001280:	e7e1      	b.n	8001246 <HAL_I2S_Init+0x5e>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8001282:	2200      	movs	r2, #0
 8001284:	e7ea      	b.n	800125c <HAL_I2S_Init+0x74>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001286:	4313      	orrs	r3, r2
 8001288:	6922      	ldr	r2, [r4, #16]
 800128a:	6820      	ldr	r0, [r4, #0]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 800128c:	6866      	ldr	r6, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800128e:	4313      	orrs	r3, r2
 8001290:	6203      	str	r3, [r0, #32]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001292:	68e2      	ldr	r2, [r4, #12]
 8001294:	68a3      	ldr	r3, [r4, #8]
 8001296:	4313      	orrs	r3, r2
                       (uint16_t)hi2s->Init.CPOL))));
 8001298:	69a2      	ldr	r2, [r4, #24]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800129a:	4313      	orrs	r3, r2
 800129c:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 800129e:	f446 6100 	orr.w	r1, r6, #2048	; 0x800
 80012a2:	4319      	orrs	r1, r3
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80012a4:	6a22      	ldr	r2, [r4, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 80012a6:	b289      	uxth	r1, r1
 80012a8:	430d      	orrs	r5, r1
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80012aa:	2a01      	cmp	r2, #1
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 80012ac:	61c5      	str	r5, [r0, #28]
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80012ae:	d11c      	bne.n	80012ea <HAL_I2S_Init+0x102>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <HAL_I2S_Init+0x114>)
 80012b2:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80012b4:	4912      	ldr	r1, [pc, #72]	; (8001300 <HAL_I2S_Init+0x118>)
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <HAL_I2S_Init+0x11c>)
 80012b8:	4288      	cmp	r0, r1
 80012ba:	bf18      	it	ne
 80012bc:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 80012c0:	f436 7000 	bics.w	r0, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80012c4:	69d1      	ldr	r1, [r2, #28]
 80012c6:	f421 617b 	bic.w	r1, r1, #4016	; 0xfb0
 80012ca:	f021 010f 	bic.w	r1, r1, #15
 80012ce:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80012d0:	f04f 0102 	mov.w	r1, #2
 80012d4:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80012d6:	69d1      	ldr	r1, [r2, #28]
      tmp = I2S_MODE_SLAVE_TX;
 80012d8:	bf0c      	ite	eq
 80012da:	f44f 7080 	moveq.w	r0, #256	; 0x100
 80012de:	2000      	movne	r0, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80012e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012e4:	4303      	orrs	r3, r0
 80012e6:	430b      	orrs	r3, r1
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 80012e8:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80012ea:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80012ec:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80012ee:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80012f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 80012f4:	bd70      	pop	{r4, r5, r6, pc}
 80012f6:	bf00      	nop
 80012f8:	08001309 	.word	0x08001309
 80012fc:	08001415 	.word	0x08001415
 8001300:	40003800 	.word	0x40003800
 8001304:	40003400 	.word	0x40003400

08001308 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800130a:	6803      	ldr	r3, [r0, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	9201      	str	r2, [sp, #4]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001310:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001314:	2a04      	cmp	r2, #4
{
 8001316:	4604      	mov	r4, r0
  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001318:	d13a      	bne.n	8001390 <I2S_IRQHandler+0x88>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800131a:	9a01      	ldr	r2, [sp, #4]
 800131c:	07d1      	lsls	r1, r2, #31
 800131e:	d519      	bpl.n	8001354 <I2S_IRQHandler+0x4c>
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	0652      	lsls	r2, r2, #25
 8001324:	d516      	bpl.n	8001354 <I2S_IRQHandler+0x4c>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001326:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001328:	1c91      	adds	r1, r2, #2
 800132a:	62c1      	str	r1, [r0, #44]	; 0x2c
 800132c:	68d9      	ldr	r1, [r3, #12]
 800132e:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8001330:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001332:	3a01      	subs	r2, #1
 8001334:	b292      	uxth	r2, r2
 8001336:	8642      	strh	r2, [r0, #50]	; 0x32
  if(hi2s->RxXferCount == 0U)
 8001338:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800133a:	b292      	uxth	r2, r2
 800133c:	b952      	cbnz	r2, 8001354 <I2S_IRQHandler+0x4c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001344:	0412      	lsls	r2, r2, #16
 8001346:	0c12      	lsrs	r2, r2, #16
 8001348:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800134a:	2301      	movs	r3, #1
 800134c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001350:	f7ff ff47 	bl	80011e2 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001354:	9b01      	ldr	r3, [sp, #4]
 8001356:	0659      	lsls	r1, r3, #25
 8001358:	d51a      	bpl.n	8001390 <I2S_IRQHandler+0x88>
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	0692      	lsls	r2, r2, #26
 8001360:	d516      	bpl.n	8001390 <I2S_IRQHandler+0x88>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001368:	0412      	lsls	r2, r2, #16
 800136a:	0c12      	lsrs	r2, r2, #16
 800136c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800136e:	2200      	movs	r2, #0
 8001370:	9202      	str	r2, [sp, #8]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	9202      	str	r2, [sp, #8]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800137c:	2301      	movs	r3, #1
 800137e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001382:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800138a:	4620      	mov	r0, r4
 800138c:	f7ff ff2a 	bl	80011e4 <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001390:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001394:	2b03      	cmp	r3, #3
 8001396:	d13a      	bne.n	800140e <I2S_IRQHandler+0x106>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	079b      	lsls	r3, r3, #30
 800139c:	d51b      	bpl.n	80013d6 <I2S_IRQHandler+0xce>
 800139e:	6822      	ldr	r2, [r4, #0]
 80013a0:	6853      	ldr	r3, [r2, #4]
 80013a2:	0618      	lsls	r0, r3, #24
 80013a4:	d517      	bpl.n	80013d6 <I2S_IRQHandler+0xce>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80013a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013a8:	1c99      	adds	r1, r3, #2
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	6261      	str	r1, [r4, #36]	; 0x24
 80013ae:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 80013b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013b2:	3b01      	subs	r3, #1
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if(hi2s->TxXferCount == 0U)
 80013b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	b95b      	cbnz	r3, 80013d6 <I2S_IRQHandler+0xce>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013be:	6853      	ldr	r3, [r2, #4]
 80013c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80013c4:	041b      	lsls	r3, r3, #16
 80013c6:	0c1b      	lsrs	r3, r3, #16
 80013c8:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80013ca:	2301      	movs	r3, #1
 80013cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 80013d0:	4620      	mov	r0, r4
 80013d2:	f7ff ff05 	bl	80011e0 <HAL_I2S_TxCpltCallback>
      {
        I2S_Transmit_IT(hi2s);
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80013d6:	9b01      	ldr	r3, [sp, #4]
 80013d8:	0719      	lsls	r1, r3, #28
 80013da:	d518      	bpl.n	800140e <I2S_IRQHandler+0x106>
 80013dc:	6823      	ldr	r3, [r4, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	0692      	lsls	r2, r2, #26
 80013e2:	d514      	bpl.n	800140e <I2S_IRQHandler+0x106>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80013ea:	0412      	lsls	r2, r2, #16
 80013ec:	0c12      	lsrs	r2, r2, #16
 80013ee:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80013f0:	2200      	movs	r2, #0
 80013f2:	9203      	str	r2, [sp, #12]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	9303      	str	r3, [sp, #12]
 80013f8:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80013fa:	2301      	movs	r3, #1
 80013fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001400:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001408:	4620      	mov	r0, r4
 800140a:	f7ff feeb 	bl	80011e4 <HAL_I2S_ErrorCallback>
    }
  }
}
 800140e:	b004      	add	sp, #16
 8001410:	bd10      	pop	{r4, pc}

08001412 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001412:	4770      	bx	lr

08001414 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8001416:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001418:	4992      	ldr	r1, [pc, #584]	; (8001664 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	9200      	str	r2, [sp, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 800141e:	4a92      	ldr	r2, [pc, #584]	; (8001668 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001420:	428b      	cmp	r3, r1
 8001422:	bf18      	it	ne
 8001424:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
{
 8001428:	4604      	mov	r4, r0
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 800142a:	6891      	ldr	r1, [r2, #8]
 800142c:	9101      	str	r1, [sp, #4]
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 800142e:	69d9      	ldr	r1, [r3, #28]
 8001430:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001434:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001438:	d004      	beq.n	8001444 <HAL_I2SEx_FullDuplex_IRQHandler+0x30>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800143a:	69d9      	ldr	r1, [r3, #28]
 800143c:	f411 7f40 	tst.w	r1, #768	; 0x300
 8001440:	f040 8097 	bne.w	8001572 <HAL_I2SEx_FullDuplex_IRQHandler+0x15e>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001444:	9a00      	ldr	r2, [sp, #0]
 8001446:	0792      	lsls	r2, r2, #30
 8001448:	d51d      	bpl.n	8001486 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	0610      	lsls	r0, r2, #24
 800144e:	d51a      	bpl.n	8001486 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
  if(i2sUsed == I2S_USE_I2S)
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001450:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001452:	1c91      	adds	r1, r2, #2
 8001454:	8812      	ldrh	r2, [r2, #0]
 8001456:	6261      	str	r1, [r4, #36]	; 0x24
 8001458:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 800145a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800145c:	3a01      	subs	r2, #1
 800145e:	b292      	uxth	r2, r2
 8001460:	8562      	strh	r2, [r4, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 8001462:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001464:	b292      	uxth	r2, r2
 8001466:	b972      	cbnz	r2, 8001486 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800146e:	0412      	lsls	r2, r2, #16
 8001470:	0c12      	lsrs	r2, r2, #16
 8001472:	605a      	str	r2, [r3, #4]

      if(hi2s->RxXferCount == 0U)
 8001474:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001476:	b29b      	uxth	r3, r3
 8001478:	b92b      	cbnz	r3, 8001486 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800147a:	2301      	movs	r3, #1
 800147c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001480:	4620      	mov	r0, r4
 8001482:	f7ff ffc6 	bl	8001412 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001486:	9b01      	ldr	r3, [sp, #4]
 8001488:	07d9      	lsls	r1, r3, #31
 800148a:	d522      	bpl.n	80014d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
 800148c:	4a75      	ldr	r2, [pc, #468]	; (8001664 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 800148e:	6821      	ldr	r1, [r4, #0]
 8001490:	4b75      	ldr	r3, [pc, #468]	; (8001668 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001492:	4291      	cmp	r1, r2
 8001494:	bf18      	it	ne
 8001496:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	0652      	lsls	r2, r2, #25
 800149e:	d518      	bpl.n	80014d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    }
  }
  else
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80014a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014a2:	1c91      	adds	r1, r2, #2
 80014a4:	62e1      	str	r1, [r4, #44]	; 0x2c
 80014a6:	68d9      	ldr	r1, [r3, #12]
 80014a8:	8011      	strh	r1, [r2, #0]
    hi2s->RxXferCount--;
 80014aa:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80014ac:	3a01      	subs	r2, #1
 80014ae:	b292      	uxth	r2, r2
 80014b0:	8662      	strh	r2, [r4, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 80014b2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80014b4:	b292      	uxth	r2, r2
 80014b6:	b962      	cbnz	r2, 80014d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    {
      /* Disable I2Sext RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80014be:	605a      	str	r2, [r3, #4]

      if(hi2s->TxXferCount == 0U)
 80014c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b92b      	cbnz	r3, 80014d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff ffa0 	bl	8001412 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80014d2:	9b01      	ldr	r3, [sp, #4]
 80014d4:	0658      	lsls	r0, r3, #25
 80014d6:	d524      	bpl.n	8001522 <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
 80014d8:	4962      	ldr	r1, [pc, #392]	; (8001664 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	4a62      	ldr	r2, [pc, #392]	; (8001668 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 80014de:	428b      	cmp	r3, r1
 80014e0:	bf18      	it	ne
 80014e2:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80014e6:	6851      	ldr	r1, [r2, #4]
 80014e8:	0689      	lsls	r1, r1, #26
 80014ea:	d51a      	bpl.n	8001522 <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80014ec:	6851      	ldr	r1, [r2, #4]
 80014ee:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80014f2:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80014fa:	0412      	lsls	r2, r2, #16
 80014fc:	0c12      	lsrs	r2, r2, #16
 80014fe:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001500:	2200      	movs	r2, #0
 8001502:	9202      	str	r2, [sp, #8]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	9202      	str	r2, [sp, #8]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 800150e:	2301      	movs	r3, #1
 8001510:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001514:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff fe61 	bl	80011e4 <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001522:	9b00      	ldr	r3, [sp, #0]
 8001524:	071b      	lsls	r3, r3, #28
 8001526:	d522      	bpl.n	800156e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	0690      	lsls	r0, r2, #26
 800152e:	d51e      	bpl.n	800156e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001530:	685a      	ldr	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001532:	494c      	ldr	r1, [pc, #304]	; (8001664 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001534:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001538:	0412      	lsls	r2, r2, #16
 800153a:	0c12      	lsrs	r2, r2, #16
 800153c:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800153e:	4a4a      	ldr	r2, [pc, #296]	; (8001668 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001540:	428b      	cmp	r3, r1
 8001542:	bf18      	it	ne
 8001544:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001548:	6851      	ldr	r1, [r2, #4]
 800154a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800154e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001550:	2200      	movs	r2, #0
 8001552:	9203      	str	r2, [sp, #12]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	9303      	str	r3, [sp, #12]
 8001558:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 800155a:	2301      	movs	r3, #1
 800155c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8001560:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001568:	4620      	mov	r0, r4
 800156a:	f7ff fe3b 	bl	80011e4 <HAL_I2S_ErrorCallback>
}
 800156e:	b004      	add	sp, #16
 8001570:	bd10      	pop	{r4, pc}
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001572:	9b01      	ldr	r3, [sp, #4]
 8001574:	0799      	lsls	r1, r3, #30
 8001576:	d51a      	bpl.n	80015ae <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
 8001578:	6853      	ldr	r3, [r2, #4]
 800157a:	061b      	lsls	r3, r3, #24
 800157c:	d517      	bpl.n	80015ae <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800157e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001580:	1c99      	adds	r1, r3, #2
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	6241      	str	r1, [r0, #36]	; 0x24
 8001586:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 8001588:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800158a:	3b01      	subs	r3, #1
 800158c:	b29b      	uxth	r3, r3
 800158e:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 8001590:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001592:	b29b      	uxth	r3, r3
 8001594:	b95b      	cbnz	r3, 80015ae <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001596:	6853      	ldr	r3, [r2, #4]
 8001598:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800159c:	6053      	str	r3, [r2, #4]
      if(hi2s->RxXferCount == 0U)
 800159e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	b923      	cbnz	r3, 80015ae <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
        hi2s->State = HAL_I2S_STATE_READY;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80015aa:	f7ff ff32 	bl	8001412 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80015ae:	9b00      	ldr	r3, [sp, #0]
 80015b0:	07d8      	lsls	r0, r3, #31
 80015b2:	d51e      	bpl.n	80015f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
 80015b4:	6822      	ldr	r2, [r4, #0]
 80015b6:	6853      	ldr	r3, [r2, #4]
 80015b8:	0659      	lsls	r1, r3, #25
 80015ba:	d51a      	bpl.n	80015f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80015bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015be:	1c99      	adds	r1, r3, #2
 80015c0:	62e1      	str	r1, [r4, #44]	; 0x2c
 80015c2:	68d1      	ldr	r1, [r2, #12]
 80015c4:	8019      	strh	r1, [r3, #0]
    hi2s->RxXferCount--;
 80015c6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80015c8:	3b01      	subs	r3, #1
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	8663      	strh	r3, [r4, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 80015ce:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	b973      	cbnz	r3, 80015f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80015d4:	6853      	ldr	r3, [r2, #4]
 80015d6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80015da:	041b      	lsls	r3, r3, #16
 80015dc:	0c1b      	lsrs	r3, r3, #16
 80015de:	6053      	str	r3, [r2, #4]
      if(hi2s->TxXferCount == 0U)
 80015e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	b92b      	cbnz	r3, 80015f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
        hi2s->State = HAL_I2S_STATE_READY;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80015ec:	4620      	mov	r0, r4
 80015ee:	f7ff ff10 	bl	8001412 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80015f2:	9b00      	ldr	r3, [sp, #0]
 80015f4:	065a      	lsls	r2, r3, #25
 80015f6:	d51d      	bpl.n	8001634 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
 80015f8:	6822      	ldr	r2, [r4, #0]
 80015fa:	6853      	ldr	r3, [r2, #4]
 80015fc:	069b      	lsls	r3, r3, #26
 80015fe:	d519      	bpl.n	8001634 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001600:	6853      	ldr	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001602:	4918      	ldr	r1, [pc, #96]	; (8001664 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001604:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	0c1b      	lsrs	r3, r3, #16
 800160c:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001610:	428a      	cmp	r2, r1
 8001612:	bf18      	it	ne
 8001614:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001618:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001620:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001622:	2301      	movs	r3, #1
 8001624:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001628:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001630:	f7ff fdd8 	bl	80011e4 <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001634:	9b01      	ldr	r3, [sp, #4]
 8001636:	0718      	lsls	r0, r3, #28
 8001638:	d599      	bpl.n	800156e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800163a:	490a      	ldr	r1, [pc, #40]	; (8001664 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 800163c:	6822      	ldr	r2, [r4, #0]
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001640:	428a      	cmp	r2, r1
 8001642:	bf18      	it	ne
 8001644:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001648:	6859      	ldr	r1, [r3, #4]
 800164a:	0689      	lsls	r1, r1, #26
 800164c:	d58f      	bpl.n	800156e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8001654:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001656:	6853      	ldr	r3, [r2, #4]
 8001658:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800165c:	041b      	lsls	r3, r3, #16
 800165e:	0c1b      	lsrs	r3, r3, #16
 8001660:	6053      	str	r3, [r2, #4]
 8001662:	e77a      	b.n	800155a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001664:	40003800 	.word	0x40003800
 8001668:	40003400 	.word	0x40003400

0800166c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800166c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001670:	4604      	mov	r4, r0
 8001672:	b918      	cbnz	r0, 800167c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001674:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001676:	b002      	add	sp, #8
 8001678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167c:	6803      	ldr	r3, [r0, #0]
 800167e:	07dd      	lsls	r5, r3, #31
 8001680:	d410      	bmi.n	80016a4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	0798      	lsls	r0, r3, #30
 8001686:	d458      	bmi.n	800173a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	071a      	lsls	r2, r3, #28
 800168c:	f100 809a 	bmi.w	80017c4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	075b      	lsls	r3, r3, #29
 8001694:	f100 80b8 	bmi.w	8001808 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001698:	69a2      	ldr	r2, [r4, #24]
 800169a:	2a00      	cmp	r2, #0
 800169c:	f040 8119 	bne.w	80018d2 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80016a0:	2000      	movs	r0, #0
 80016a2:	e7e8      	b.n	8001676 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016a4:	4ba6      	ldr	r3, [pc, #664]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	f002 020c 	and.w	r2, r2, #12
 80016ac:	2a04      	cmp	r2, #4
 80016ae:	d007      	beq.n	80016c0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016b6:	2a08      	cmp	r2, #8
 80016b8:	d10a      	bne.n	80016d0 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	0259      	lsls	r1, r3, #9
 80016be:	d507      	bpl.n	80016d0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	4b9f      	ldr	r3, [pc, #636]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	039a      	lsls	r2, r3, #14
 80016c6:	d5dc      	bpl.n	8001682 <HAL_RCC_OscConfig+0x16>
 80016c8:	6863      	ldr	r3, [r4, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1d9      	bne.n	8001682 <HAL_RCC_OscConfig+0x16>
 80016ce:	e7d1      	b.n	8001674 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d0:	6863      	ldr	r3, [r4, #4]
 80016d2:	4d9b      	ldr	r5, [pc, #620]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d111      	bne.n	80016fe <HAL_RCC_OscConfig+0x92>
 80016da:	682b      	ldr	r3, [r5, #0]
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016e2:	f7fe ff43 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4d96      	ldr	r5, [pc, #600]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80016e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	682b      	ldr	r3, [r5, #0]
 80016ec:	039b      	lsls	r3, r3, #14
 80016ee:	d4c8      	bmi.n	8001682 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f0:	f7fe ff3c 	bl	800056c <HAL_GetTick>
 80016f4:	1b80      	subs	r0, r0, r6
 80016f6:	2864      	cmp	r0, #100	; 0x64
 80016f8:	d9f7      	bls.n	80016ea <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80016fa:	2003      	movs	r0, #3
 80016fc:	e7bb      	b.n	8001676 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001702:	d104      	bne.n	800170e <HAL_RCC_OscConfig+0xa2>
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170a:	602b      	str	r3, [r5, #0]
 800170c:	e7e5      	b.n	80016da <HAL_RCC_OscConfig+0x6e>
 800170e:	682a      	ldr	r2, [r5, #0]
 8001710:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001714:	602a      	str	r2, [r5, #0]
 8001716:	682a      	ldr	r2, [r5, #0]
 8001718:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800171c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1df      	bne.n	80016e2 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001722:	f7fe ff23 	bl	800056c <HAL_GetTick>
 8001726:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001728:	682b      	ldr	r3, [r5, #0]
 800172a:	039f      	lsls	r7, r3, #14
 800172c:	d5a9      	bpl.n	8001682 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172e:	f7fe ff1d 	bl	800056c <HAL_GetTick>
 8001732:	1b80      	subs	r0, r0, r6
 8001734:	2864      	cmp	r0, #100	; 0x64
 8001736:	d9f7      	bls.n	8001728 <HAL_RCC_OscConfig+0xbc>
 8001738:	e7df      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800173a:	4b81      	ldr	r3, [pc, #516]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	f012 0f0c 	tst.w	r2, #12
 8001742:	d007      	beq.n	8001754 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800174a:	2a08      	cmp	r2, #8
 800174c:	d111      	bne.n	8001772 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	025e      	lsls	r6, r3, #9
 8001752:	d40e      	bmi.n	8001772 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001754:	4b7a      	ldr	r3, [pc, #488]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	0795      	lsls	r5, r2, #30
 800175a:	d502      	bpl.n	8001762 <HAL_RCC_OscConfig+0xf6>
 800175c:	68e2      	ldr	r2, [r4, #12]
 800175e:	2a01      	cmp	r2, #1
 8001760:	d188      	bne.n	8001674 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	6921      	ldr	r1, [r4, #16]
 8001766:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800176a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800176e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001770:	e78a      	b.n	8001688 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001772:	68e2      	ldr	r2, [r4, #12]
 8001774:	4b73      	ldr	r3, [pc, #460]	; (8001944 <HAL_RCC_OscConfig+0x2d8>)
 8001776:	b1b2      	cbz	r2, 80017a6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800177c:	f7fe fef6 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	4d6f      	ldr	r5, [pc, #444]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001782:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	682b      	ldr	r3, [r5, #0]
 8001786:	0798      	lsls	r0, r3, #30
 8001788:	d507      	bpl.n	800179a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178a:	682b      	ldr	r3, [r5, #0]
 800178c:	6922      	ldr	r2, [r4, #16]
 800178e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001792:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001796:	602b      	str	r3, [r5, #0]
 8001798:	e776      	b.n	8001688 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179a:	f7fe fee7 	bl	800056c <HAL_GetTick>
 800179e:	1b80      	subs	r0, r0, r6
 80017a0:	2802      	cmp	r0, #2
 80017a2:	d9ef      	bls.n	8001784 <HAL_RCC_OscConfig+0x118>
 80017a4:	e7a9      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80017a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017a8:	f7fe fee0 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ac:	4d64      	ldr	r5, [pc, #400]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80017ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b0:	682b      	ldr	r3, [r5, #0]
 80017b2:	0799      	lsls	r1, r3, #30
 80017b4:	f57f af68 	bpl.w	8001688 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b8:	f7fe fed8 	bl	800056c <HAL_GetTick>
 80017bc:	1b80      	subs	r0, r0, r6
 80017be:	2802      	cmp	r0, #2
 80017c0:	d9f6      	bls.n	80017b0 <HAL_RCC_OscConfig+0x144>
 80017c2:	e79a      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017c4:	6962      	ldr	r2, [r4, #20]
 80017c6:	4b60      	ldr	r3, [pc, #384]	; (8001948 <HAL_RCC_OscConfig+0x2dc>)
 80017c8:	b17a      	cbz	r2, 80017ea <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017ce:	f7fe fecd 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d2:	4d5b      	ldr	r5, [pc, #364]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80017d4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017d8:	079f      	lsls	r7, r3, #30
 80017da:	f53f af59 	bmi.w	8001690 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017de:	f7fe fec5 	bl	800056c <HAL_GetTick>
 80017e2:	1b80      	subs	r0, r0, r6
 80017e4:	2802      	cmp	r0, #2
 80017e6:	d9f6      	bls.n	80017d6 <HAL_RCC_OscConfig+0x16a>
 80017e8:	e787      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80017ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017ec:	f7fe febe 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f0:	4d53      	ldr	r5, [pc, #332]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80017f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017f6:	0798      	lsls	r0, r3, #30
 80017f8:	f57f af4a 	bpl.w	8001690 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017fc:	f7fe feb6 	bl	800056c <HAL_GetTick>
 8001800:	1b80      	subs	r0, r0, r6
 8001802:	2802      	cmp	r0, #2
 8001804:	d9f6      	bls.n	80017f4 <HAL_RCC_OscConfig+0x188>
 8001806:	e778      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001808:	4b4d      	ldr	r3, [pc, #308]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
 800180a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800180c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001810:	d128      	bne.n	8001864 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	9201      	str	r2, [sp, #4]
 8001814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001816:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001826:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	4d48      	ldr	r5, [pc, #288]	; (800194c <HAL_RCC_OscConfig+0x2e0>)
 800182a:	682b      	ldr	r3, [r5, #0]
 800182c:	05d9      	lsls	r1, r3, #23
 800182e:	d51b      	bpl.n	8001868 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001830:	68a3      	ldr	r3, [r4, #8]
 8001832:	4d43      	ldr	r5, [pc, #268]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
 8001834:	2b01      	cmp	r3, #1
 8001836:	d127      	bne.n	8001888 <HAL_RCC_OscConfig+0x21c>
 8001838:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001840:	f7fe fe94 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	4d3e      	ldr	r5, [pc, #248]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001846:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001848:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800184e:	079b      	lsls	r3, r3, #30
 8001850:	d539      	bpl.n	80018c6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001852:	2e00      	cmp	r6, #0
 8001854:	f43f af20 	beq.w	8001698 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001858:	4a39      	ldr	r2, [pc, #228]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
 800185a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800185c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	e719      	b.n	8001698 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001864:	2600      	movs	r6, #0
 8001866:	e7df      	b.n	8001828 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001868:	682b      	ldr	r3, [r5, #0]
 800186a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001870:	f7fe fe7c 	bl	800056c <HAL_GetTick>
 8001874:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	682b      	ldr	r3, [r5, #0]
 8001878:	05da      	lsls	r2, r3, #23
 800187a:	d4d9      	bmi.n	8001830 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187c:	f7fe fe76 	bl	800056c <HAL_GetTick>
 8001880:	1bc0      	subs	r0, r0, r7
 8001882:	2802      	cmp	r0, #2
 8001884:	d9f7      	bls.n	8001876 <HAL_RCC_OscConfig+0x20a>
 8001886:	e738      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	2b05      	cmp	r3, #5
 800188a:	d104      	bne.n	8001896 <HAL_RCC_OscConfig+0x22a>
 800188c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	672b      	str	r3, [r5, #112]	; 0x70
 8001894:	e7d0      	b.n	8001838 <HAL_RCC_OscConfig+0x1cc>
 8001896:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001898:	f022 0201 	bic.w	r2, r2, #1
 800189c:	672a      	str	r2, [r5, #112]	; 0x70
 800189e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018a0:	f022 0204 	bic.w	r2, r2, #4
 80018a4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ca      	bne.n	8001840 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80018aa:	f7fe fe5f 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018b2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018b6:	0798      	lsls	r0, r3, #30
 80018b8:	d5cb      	bpl.n	8001852 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7fe fe57 	bl	800056c <HAL_GetTick>
 80018be:	1bc0      	subs	r0, r0, r7
 80018c0:	4540      	cmp	r0, r8
 80018c2:	d9f7      	bls.n	80018b4 <HAL_RCC_OscConfig+0x248>
 80018c4:	e719      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7fe fe51 	bl	800056c <HAL_GetTick>
 80018ca:	1bc0      	subs	r0, r0, r7
 80018cc:	4540      	cmp	r0, r8
 80018ce:	d9bd      	bls.n	800184c <HAL_RCC_OscConfig+0x1e0>
 80018d0:	e713      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018d2:	4d1b      	ldr	r5, [pc, #108]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
 80018d4:	68ab      	ldr	r3, [r5, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b08      	cmp	r3, #8
 80018dc:	f43f aeca 	beq.w	8001674 <HAL_RCC_OscConfig+0x8>
 80018e0:	4e1b      	ldr	r6, [pc, #108]	; (8001950 <HAL_RCC_OscConfig+0x2e4>)
 80018e2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80018e6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e8:	d134      	bne.n	8001954 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80018ea:	f7fe fe3f 	bl	800056c <HAL_GetTick>
 80018ee:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f0:	682b      	ldr	r3, [r5, #0]
 80018f2:	0199      	lsls	r1, r3, #6
 80018f4:	d41e      	bmi.n	8001934 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018f6:	6a22      	ldr	r2, [r4, #32]
 80018f8:	69e3      	ldr	r3, [r4, #28]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018fe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001902:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001904:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001908:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190a:	4c0d      	ldr	r4, [pc, #52]	; (8001940 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800190c:	0852      	lsrs	r2, r2, #1
 800190e:	3a01      	subs	r2, #1
 8001910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001914:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001916:	2301      	movs	r3, #1
 8001918:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800191a:	f7fe fe27 	bl	800056c <HAL_GetTick>
 800191e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	019a      	lsls	r2, r3, #6
 8001924:	f53f aebc 	bmi.w	80016a0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001928:	f7fe fe20 	bl	800056c <HAL_GetTick>
 800192c:	1b40      	subs	r0, r0, r5
 800192e:	2802      	cmp	r0, #2
 8001930:	d9f6      	bls.n	8001920 <HAL_RCC_OscConfig+0x2b4>
 8001932:	e6e2      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001934:	f7fe fe1a 	bl	800056c <HAL_GetTick>
 8001938:	1bc0      	subs	r0, r0, r7
 800193a:	2802      	cmp	r0, #2
 800193c:	d9d8      	bls.n	80018f0 <HAL_RCC_OscConfig+0x284>
 800193e:	e6dc      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
 8001940:	40023800 	.word	0x40023800
 8001944:	42470000 	.word	0x42470000
 8001948:	42470e80 	.word	0x42470e80
 800194c:	40007000 	.word	0x40007000
 8001950:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001954:	f7fe fe0a 	bl	800056c <HAL_GetTick>
 8001958:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	682b      	ldr	r3, [r5, #0]
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	f57f ae9f 	bpl.w	80016a0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001962:	f7fe fe03 	bl	800056c <HAL_GetTick>
 8001966:	1b00      	subs	r0, r0, r4
 8001968:	2802      	cmp	r0, #2
 800196a:	d9f6      	bls.n	800195a <HAL_RCC_OscConfig+0x2ee>
 800196c:	e6c5      	b.n	80016fa <HAL_RCC_OscConfig+0x8e>
 800196e:	bf00      	nop

08001970 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001970:	4913      	ldr	r1, [pc, #76]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001972:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001974:	688b      	ldr	r3, [r1, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b04      	cmp	r3, #4
 800197c:	d003      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x16>
 800197e:	2b08      	cmp	r3, #8
 8001980:	d003      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001982:	4810      	ldr	r0, [pc, #64]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001984:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001986:	4810      	ldr	r0, [pc, #64]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x58>)
 8001988:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800198a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001990:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001994:	bf14      	ite	ne
 8001996:	480c      	ldrne	r0, [pc, #48]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001998:	480a      	ldreq	r0, [pc, #40]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800199e:	bf18      	it	ne
 80019a0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a6:	fba1 0100 	umull	r0, r1, r1, r0
 80019aa:	f7fe fc0d 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x50>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019b6:	3301      	adds	r3, #1
 80019b8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80019ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80019be:	bd08      	pop	{r3, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	00f42400 	.word	0x00f42400
 80019c8:	007a1200 	.word	0x007a1200

080019cc <HAL_RCC_ClockConfig>:
{
 80019cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80019d2:	4604      	mov	r4, r0
 80019d4:	b910      	cbnz	r0, 80019dc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019d6:	2001      	movs	r0, #1
 80019d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <HAL_RCC_ClockConfig+0x124>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f002 020f 	and.w	r2, r2, #15
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d328      	bcc.n	8001a3a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	6821      	ldr	r1, [r4, #0]
 80019ea:	078f      	lsls	r7, r1, #30
 80019ec:	d42d      	bmi.n	8001a4a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ee:	07c8      	lsls	r0, r1, #31
 80019f0:	d440      	bmi.n	8001a74 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019f2:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <HAL_RCC_ClockConfig+0x124>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	f002 020f 	and.w	r2, r2, #15
 80019fa:	4295      	cmp	r5, r2
 80019fc:	d366      	bcc.n	8001acc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fe:	6822      	ldr	r2, [r4, #0]
 8001a00:	0751      	lsls	r1, r2, #29
 8001a02:	d46c      	bmi.n	8001ade <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	0713      	lsls	r3, r2, #28
 8001a06:	d507      	bpl.n	8001a18 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a08:	4a3a      	ldr	r2, [pc, #232]	; (8001af4 <HAL_RCC_ClockConfig+0x128>)
 8001a0a:	6921      	ldr	r1, [r4, #16]
 8001a0c:	6893      	ldr	r3, [r2, #8]
 8001a0e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a16:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a18:	f7ff ffaa 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 8001a1c:	4b35      	ldr	r3, [pc, #212]	; (8001af4 <HAL_RCC_ClockConfig+0x128>)
 8001a1e:	4a36      	ldr	r2, [pc, #216]	; (8001af8 <HAL_RCC_ClockConfig+0x12c>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	40d8      	lsrs	r0, r3
 8001a2a:	4b34      	ldr	r3, [pc, #208]	; (8001afc <HAL_RCC_ClockConfig+0x130>)
 8001a2c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7fe fd52 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8001a34:	2000      	movs	r0, #0
 8001a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	b2ca      	uxtb	r2, r1
 8001a3c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	4299      	cmp	r1, r3
 8001a46:	d1c6      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xa>
 8001a48:	e7ce      	b.n	80019e8 <HAL_RCC_ClockConfig+0x1c>
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a50:	bf1e      	ittt	ne
 8001a52:	689a      	ldrne	r2, [r3, #8]
 8001a54:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001a58:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a5c:	bf42      	ittt	mi
 8001a5e:	689a      	ldrmi	r2, [r3, #8]
 8001a60:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001a64:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	68a0      	ldr	r0, [r4, #8]
 8001a6a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a6e:	4302      	orrs	r2, r0
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	e7bc      	b.n	80019ee <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a74:	6862      	ldr	r2, [r4, #4]
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <HAL_RCC_ClockConfig+0x128>)
 8001a78:	2a01      	cmp	r2, #1
 8001a7a:	d11d      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a82:	d0a8      	beq.n	80019d6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a84:	4e1b      	ldr	r6, [pc, #108]	; (8001af4 <HAL_RCC_ClockConfig+0x128>)
 8001a86:	68b3      	ldr	r3, [r6, #8]
 8001a88:	f023 0303 	bic.w	r3, r3, #3
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001a90:	f7fe fd6c 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a98:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	68b3      	ldr	r3, [r6, #8]
 8001a9c:	6862      	ldr	r2, [r4, #4]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001aa6:	d0a4      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7fe fd60 	bl	800056c <HAL_GetTick>
 8001aac:	1bc0      	subs	r0, r0, r7
 8001aae:	4540      	cmp	r0, r8
 8001ab0:	d9f3      	bls.n	8001a9a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001ab2:	2003      	movs	r0, #3
}
 8001ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab8:	1e91      	subs	r1, r2, #2
 8001aba:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001abe:	d802      	bhi.n	8001ac6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ac4:	e7dd      	b.n	8001a82 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	f013 0f02 	tst.w	r3, #2
 8001aca:	e7da      	b.n	8001a82 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001acc:	b2ea      	uxtb	r2, r5
 8001ace:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	429d      	cmp	r5, r3
 8001ad8:	f47f af7d 	bne.w	80019d6 <HAL_RCC_ClockConfig+0xa>
 8001adc:	e78f      	b.n	80019fe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ade:	4905      	ldr	r1, [pc, #20]	; (8001af4 <HAL_RCC_ClockConfig+0x128>)
 8001ae0:	68e0      	ldr	r0, [r4, #12]
 8001ae2:	688b      	ldr	r3, [r1, #8]
 8001ae4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001ae8:	4303      	orrs	r3, r0
 8001aea:	608b      	str	r3, [r1, #8]
 8001aec:	e78a      	b.n	8001a04 <HAL_RCC_ClockConfig+0x38>
 8001aee:	bf00      	nop
 8001af0:	40023c00 	.word	0x40023c00
 8001af4:	40023800 	.word	0x40023800
 8001af8:	08003dc0 	.word	0x08003dc0
 8001afc:	20000028 	.word	0x20000028

08001b00 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b00:	4b01      	ldr	r3, [pc, #4]	; (8001b08 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000028 	.word	0x20000028

08001b0c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b0e:	4a05      	ldr	r2, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	4a03      	ldr	r2, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b1a:	6810      	ldr	r0, [r2, #0]
}
 8001b1c:	40d8      	lsrs	r0, r3
 8001b1e:	4770      	bx	lr
 8001b20:	40023800 	.word	0x40023800
 8001b24:	08003dd0 	.word	0x08003dd0
 8001b28:	20000028 	.word	0x20000028

08001b2c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b2c:	6803      	ldr	r3, [r0, #0]
 8001b2e:	f013 0f05 	tst.w	r3, #5
{
 8001b32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b34:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b36:	d105      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b38:	6828      	ldr	r0, [r5, #0]
 8001b3a:	f010 0002 	ands.w	r0, r0, #2
 8001b3e:	d128      	bne.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8001b40:	b003      	add	sp, #12
 8001b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8001b44:	4c41      	ldr	r4, [pc, #260]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b46:	4e42      	ldr	r6, [pc, #264]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001b4c:	f7fe fd0e 	bl	800056c <HAL_GetTick>
 8001b50:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b52:	6833      	ldr	r3, [r6, #0]
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	d415      	bmi.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001b58:	68ab      	ldr	r3, [r5, #8]
 8001b5a:	686a      	ldr	r2, [r5, #4]
 8001b5c:	071b      	lsls	r3, r3, #28
 8001b5e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b62:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001b66:	2301      	movs	r3, #1
 8001b68:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001b6a:	f7fe fcff 	bl	800056c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b6e:	4c38      	ldr	r4, [pc, #224]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8001b70:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	0118      	lsls	r0, r3, #4
 8001b76:	d4df      	bmi.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b78:	f7fe fcf8 	bl	800056c <HAL_GetTick>
 8001b7c:	1b80      	subs	r0, r0, r6
 8001b7e:	2802      	cmp	r0, #2
 8001b80:	d9f7      	bls.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8001b82:	e004      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b84:	f7fe fcf2 	bl	800056c <HAL_GetTick>
 8001b88:	1bc0      	subs	r0, r0, r7
 8001b8a:	2802      	cmp	r0, #2
 8001b8c:	d9e1      	bls.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8001b8e:	2003      	movs	r0, #3
 8001b90:	e7d6      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8001b98:	4c2e      	ldr	r4, [pc, #184]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb2:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001bb4:	f7fe fcda 	bl	800056c <HAL_GetTick>
 8001bb8:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	05d9      	lsls	r1, r3, #23
 8001bbe:	d51b      	bpl.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bc0:	4c23      	ldr	r4, [pc, #140]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001bc2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bc4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001bc8:	d11c      	bne.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bca:	68eb      	ldr	r3, [r5, #12]
 8001bcc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001bd0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001bd4:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001bd6:	d134      	bne.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001bd8:	6891      	ldr	r1, [r2, #8]
 8001bda:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001bde:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001be2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001be6:	4301      	orrs	r1, r0
 8001be8:	6091      	str	r1, [r2, #8]
 8001bea:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	e7a3      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bf8:	f7fe fcb8 	bl	800056c <HAL_GetTick>
 8001bfc:	1b80      	subs	r0, r0, r6
 8001bfe:	2802      	cmp	r0, #2
 8001c00:	d9db      	bls.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8001c02:	e7c4      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c04:	68ea      	ldr	r2, [r5, #12]
 8001c06:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d0dd      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c0e:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c10:	4a11      	ldr	r2, [pc, #68]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001c12:	2101      	movs	r1, #1
 8001c14:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001c1e:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c20:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001c22:	07da      	lsls	r2, r3, #31
 8001c24:	d5d1      	bpl.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8001c26:	f7fe fca1 	bl	800056c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001c2e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001c32:	079b      	lsls	r3, r3, #30
 8001c34:	d4c9      	bmi.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7fe fc99 	bl	800056c <HAL_GetTick>
 8001c3a:	1b80      	subs	r0, r0, r6
 8001c3c:	42b8      	cmp	r0, r7
 8001c3e:	d9f7      	bls.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001c40:	e7a5      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c42:	6891      	ldr	r1, [r2, #8]
 8001c44:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001c48:	e7ce      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8001c4a:	bf00      	nop
 8001c4c:	42470068 	.word	0x42470068
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000
 8001c58:	42470e40 	.word	0x42470e40

08001c5c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8001c5c:	2801      	cmp	r0, #1
 8001c5e:	d120      	bne.n	8001ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8001c62:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8001c64:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8001c68:	d004      	beq.n	8001c74 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8001c6a:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8001c6c:	480f      	ldr	r0, [pc, #60]	; (8001cac <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8001c6e:	bf18      	it	ne
 8001c70:	2000      	movne	r0, #0
 8001c72:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c74:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001c76:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001c78:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c7a:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001c7c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001c80:	bf4c      	ite	mi
 8001c82:	4b0b      	ldrmi	r3, [pc, #44]	; (8001cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001c84:	4b0b      	ldrpl	r3, [pc, #44]	; (8001cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001c86:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001c8a:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001c8e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001c92:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8001c96:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001c98:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8001c9c:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8001ca0:	4770      	bx	lr
  uint32_t frequency = 0U;
 8001ca2:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	00bb8000 	.word	0x00bb8000
 8001cb0:	007a1200 	.word	0x007a1200
 8001cb4:	00f42400 	.word	0x00f42400

08001cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cb8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001cba:	4604      	mov	r4, r0
 8001cbc:	2800      	cmp	r0, #0
 8001cbe:	d036      	beq.n	8001d2e <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001cc4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001cc8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ccc:	b91b      	cbnz	r3, 8001cd6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cce:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cd2:	f001 fd91 	bl	80037f8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cd6:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001cd8:	68a0      	ldr	r0, [r4, #8]
 8001cda:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001ce2:	680b      	ldr	r3, [r1, #0]
 8001ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ce8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001cea:	6863      	ldr	r3, [r4, #4]
 8001cec:	4303      	orrs	r3, r0
 8001cee:	68e0      	ldr	r0, [r4, #12]
 8001cf0:	4303      	orrs	r3, r0
 8001cf2:	6920      	ldr	r0, [r4, #16]
 8001cf4:	4303      	orrs	r3, r0
 8001cf6:	6960      	ldr	r0, [r4, #20]
 8001cf8:	4303      	orrs	r3, r0
 8001cfa:	69e0      	ldr	r0, [r4, #28]
 8001cfc:	4303      	orrs	r3, r0
 8001cfe:	6a20      	ldr	r0, [r4, #32]
 8001d00:	4303      	orrs	r3, r0
 8001d02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d04:	4303      	orrs	r3, r0
 8001d06:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001d0a:	4303      	orrs	r3, r0
 8001d0c:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001d0e:	0c12      	lsrs	r2, r2, #16
 8001d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d12:	f002 0204 	and.w	r2, r2, #4
 8001d16:	431a      	orrs	r2, r3
 8001d18:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d1a:	69cb      	ldr	r3, [r1, #28]
 8001d1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d20:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d22:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001d24:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d26:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d28:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001d2c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d2e:	2001      	movs	r0, #1
}
 8001d30:	bd10      	pop	{r4, pc}

08001d32 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001d32:	b084      	sub	sp, #16
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	ad05      	add	r5, sp, #20
 8001d38:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d3e:	2b01      	cmp	r3, #1
{
 8001d40:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001d42:	d126      	bne.n	8001d92 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001d44:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4a:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001d4c:	68c3      	ldr	r3, [r0, #12]
 8001d4e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d56:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001d58:	68c3      	ldr	r3, [r0, #12]
 8001d5a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001d5e:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8001d60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001d62:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001d64:	bf02      	ittt	eq
 8001d66:	68c3      	ldreq	r3, [r0, #12]
 8001d68:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001d6c:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8001d6e:	f000 f889 	bl	8001e84 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8001d72:	9b08      	ldr	r3, [sp, #32]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d107      	bne.n	8001d88 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001d78:	68a3      	ldr	r3, [r4, #8]
 8001d7a:	f043 0306 	orr.w	r3, r3, #6
 8001d7e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001d80:	68a3      	ldr	r3, [r4, #8]
 8001d82:	f043 0320 	orr.w	r3, r3, #32
 8001d86:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8001d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	b004      	add	sp, #16
 8001d90:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001d92:	68c3      	ldr	r3, [r0, #12]
 8001d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d98:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8001d9a:	f000 f873 	bl	8001e84 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8001d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001da2:	63a3      	str	r3, [r4, #56]	; 0x38
 8001da4:	e7e5      	b.n	8001d72 <USB_CoreInit+0x40>

08001da6 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001da6:	6883      	ldr	r3, [r0, #8]
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001dae:	2000      	movs	r0, #0
 8001db0:	4770      	bx	lr

08001db2 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001db2:	6883      	ldr	r3, [r0, #8]
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001dba:	2000      	movs	r0, #0
 8001dbc:	4770      	bx	lr

08001dbe <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8001dbe:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8001dc0:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8001dc2:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8001dc4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001dc8:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8001dca:	d108      	bne.n	8001dde <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8001dcc:	68c3      	ldr	r3, [r0, #12]
 8001dce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dd2:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8001dd4:	2032      	movs	r0, #50	; 0x32
 8001dd6:	f7fe fbcf 	bl	8000578 <HAL_Delay>
  
  return HAL_OK;
}
 8001dda:	2000      	movs	r0, #0
 8001ddc:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8001dde:	2900      	cmp	r1, #0
 8001de0:	d1f8      	bne.n	8001dd4 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8001de2:	68c3      	ldr	r3, [r0, #12]
 8001de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001de8:	60c3      	str	r3, [r0, #12]
 8001dea:	e7f3      	b.n	8001dd4 <USB_SetCurrentMode+0x16>

08001dec <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8001dec:	0189      	lsls	r1, r1, #6
 8001dee:	f041 0120 	orr.w	r1, r1, #32
 8001df2:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <USB_FlushTxFifo+0x20>)
 8001df4:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8001df6:	3a01      	subs	r2, #1
 8001df8:	d005      	beq.n	8001e06 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001dfa:	6903      	ldr	r3, [r0, #16]
 8001dfc:	f013 0320 	ands.w	r3, r3, #32
 8001e00:	d1f9      	bne.n	8001df6 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8001e02:	4618      	mov	r0, r3
 8001e04:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001e06:	2003      	movs	r0, #3
}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	00030d41 	.word	0x00030d41

08001e10 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001e10:	2310      	movs	r3, #16
 8001e12:	4a06      	ldr	r2, [pc, #24]	; (8001e2c <USB_FlushRxFifo+0x1c>)
 8001e14:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8001e16:	3a01      	subs	r2, #1
 8001e18:	d005      	beq.n	8001e26 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001e1a:	6903      	ldr	r3, [r0, #16]
 8001e1c:	f013 0310 	ands.w	r3, r3, #16
 8001e20:	d1f9      	bne.n	8001e16 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8001e22:	4618      	mov	r0, r3
 8001e24:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001e26:	2003      	movs	r0, #3
}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	00030d41 	.word	0x00030d41

08001e30 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8001e30:	b510      	push	{r4, lr}
 8001e32:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8001e36:	b94c      	cbnz	r4, 8001e4c <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8001e38:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001e3a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001e3e:	f023 0303 	bic.w	r3, r3, #3
 8001e42:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8001e46:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8001e48:	4299      	cmp	r1, r3
 8001e4a:	d101      	bne.n	8001e50 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001e50:	f851 0b04 	ldr.w	r0, [r1], #4
 8001e54:	6010      	str	r0, [r2, #0]
 8001e56:	e7f7      	b.n	8001e48 <USB_WritePacket+0x18>

08001e58 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8001e58:	3203      	adds	r2, #3
 8001e5a:	f022 0203 	bic.w	r2, r2, #3
 8001e5e:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001e60:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8001e64:	4291      	cmp	r1, r2
 8001e66:	d101      	bne.n	8001e6c <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8001e68:	4608      	mov	r0, r1
 8001e6a:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001e6c:	6803      	ldr	r3, [r0, #0]
 8001e6e:	f841 3b04 	str.w	r3, [r1], #4
 8001e72:	e7f7      	b.n	8001e64 <USB_ReadPacket+0xc>

08001e74 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8001e74:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8001e76:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8001e78:	4010      	ands	r0, r2
 8001e7a:	4770      	bx	lr

08001e7c <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8001e7c:	6940      	ldr	r0, [r0, #20]
}
 8001e7e:	f000 0001 	and.w	r0, r0, #1
 8001e82:	4770      	bx	lr

08001e84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001e86:	3b01      	subs	r3, #1
 8001e88:	d101      	bne.n	8001e8e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001e8a:	2003      	movs	r0, #3
 8001e8c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001e8e:	6902      	ldr	r2, [r0, #16]
 8001e90:	2a00      	cmp	r2, #0
 8001e92:	daf8      	bge.n	8001e86 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001e94:	6903      	ldr	r3, [r0, #16]
 8001e96:	4a06      	ldr	r2, [pc, #24]	; (8001eb0 <USB_CoreReset+0x2c>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001e9e:	3a01      	subs	r2, #1
 8001ea0:	d0f3      	beq.n	8001e8a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001ea2:	6903      	ldr	r3, [r0, #16]
 8001ea4:	f013 0301 	ands.w	r3, r3, #1
 8001ea8:	d1f9      	bne.n	8001e9e <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8001eaa:	4618      	mov	r0, r3
}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	00030d41 	.word	0x00030d41

08001eb4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	b538      	push	{r3, r4, r5, lr}
 8001eb8:	4604      	mov	r4, r0
 8001eba:	a805      	add	r0, sp, #20
 8001ebc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 8001ec6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ecc:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 8001ece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ed0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ed4:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001ed6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001edc:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8001ede:	9b07      	ldr	r3, [sp, #28]
 8001ee0:	2b03      	cmp	r3, #3
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8001ee2:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8001ee6:	d13c      	bne.n	8001f62 <USB_HostInit+0xae>
 8001ee8:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001eec:	d039      	beq.n	8001f62 <USB_HostInit+0xae>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8001ef6:	2110      	movs	r1, #16
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f7ff ff77 	bl	8001dec <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8001efe:	4620      	mov	r0, r4
 8001f00:	f7ff ff86 	bl	8001e10 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	9906      	ldr	r1, [sp, #24]
 8001f08:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8001f10:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8001f12:	428b      	cmp	r3, r1
 8001f14:	d12a      	bne.n	8001f6c <USB_HostInit+0xb8>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 8001f16:	2101      	movs	r1, #1
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f000 f873 	bl	8002004 <USB_DriveVbus>
  
  HAL_Delay(200U);
 8001f1e:	20c8      	movs	r0, #200	; 0xc8
 8001f20:	f7fe fb2a 	bl	8000578 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
  
  if(USBx == USB_OTG_FS)
 8001f28:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTSTS = 0xFFFFFFFFU;
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f30:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 8001f32:	d120      	bne.n	8001f76 <USB_HostInit+0xc2>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8001f38:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8001f3c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <USB_HostInit+0xd8>)
 8001f40:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8001f44:	9b08      	ldr	r3, [sp, #32]
 8001f46:	b91b      	cbnz	r3, 8001f50 <USB_HostInit+0x9c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8001f48:	69a3      	ldr	r3, [r4, #24]
 8001f4a:	f043 0310 	orr.w	r3, r3, #16
 8001f4e:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8001f50:	69a2      	ldr	r2, [r4, #24]
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <USB_HostInit+0xdc>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 8001f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	b004      	add	sp, #16
 8001f60:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 8001f62:	f023 0304 	bic.w	r3, r3, #4
 8001f66:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8001f6a:	e7c4      	b.n	8001ef6 <USB_HostInit+0x42>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8001f6c:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8001f6e:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8001f70:	60d5      	str	r5, [r2, #12]
 8001f72:	3220      	adds	r2, #32
 8001f74:	e7cd      	b.n	8001f12 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x200U; 
 8001f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f7a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8001f7c:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8001f80:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <USB_HostInit+0xe0>)
 8001f84:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8001f88:	e7dc      	b.n	8001f44 <USB_HostInit+0x90>
 8001f8a:	bf00      	nop
 8001f8c:	004000e0 	.word	0x004000e0
 8001f90:	a3200008 	.word	0xa3200008
 8001f94:	00e00300 	.word	0x00e00300

08001f98 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001f98:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8001f9c:	f023 0303 	bic.w	r3, r3, #3
{
 8001fa0:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001fa2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8001fa6:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8001faa:	f001 0303 	and.w	r3, r1, #3
 8001fae:	4323      	orrs	r3, r4
  
  if (freq ==  HCFG_48_MHZ)
 8001fb0:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001fb2:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8001fb6:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 8001fba:	d104      	bne.n	8001fc6 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8001fbc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001fc0:	6053      	str	r3, [r2, #4]
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
  } 
  return HAL_OK;  
}
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 8001fc6:	2902      	cmp	r1, #2
    USBx_HOST->HFIR = 6000U;
 8001fc8:	bf04      	itt	eq
 8001fca:	f241 7370 	movweq	r3, #6000	; 0x1770
 8001fce:	6053      	streq	r3, [r2, #4]
 8001fd0:	e7f7      	b.n	8001fc2 <USB_InitFSLSPClkSel+0x2a>

08001fd2 <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8001fd2:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8001fd4:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8001fd8:	9301      	str	r3, [sp, #4]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8001fda:	9b01      	ldr	r3, [sp, #4]
 8001fdc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001fe0:	9301      	str	r3, [sp, #4]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8001fe2:	9b01      	ldr	r3, [sp, #4]
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001fe8:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8001fea:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (10U);                                /* See Note #1 */
 8001fee:	200a      	movs	r0, #10
 8001ff0:	f7fe fac2 	bl	8000578 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8001ff4:	9b01      	ldr	r3, [sp, #4]
  return HAL_OK;
}
 8001ff6:	2000      	movs	r0, #0
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8001ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ffc:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 8002000:	b002      	add	sp, #8
 8002002:	bd10      	pop	{r4, pc}

08002004 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8002004:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8002006:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800200a:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 800200c:	9b01      	ldr	r3, [sp, #4]
 800200e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002012:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8002014:	9b01      	ldr	r3, [sp, #4]
 8002016:	04da      	lsls	r2, r3, #19
 8002018:	d406      	bmi.n	8002028 <USB_DriveVbus+0x24>
 800201a:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 800201c:	bf02      	ittt	eq
 800201e:	9b01      	ldreq	r3, [sp, #4]
 8002020:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8002024:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8002028:	9b01      	ldr	r3, [sp, #4]
 800202a:	04db      	lsls	r3, r3, #19
 800202c:	d505      	bpl.n	800203a <USB_DriveVbus+0x36>
 800202e:	b921      	cbnz	r1, 800203a <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 8002030:	9b01      	ldr	r3, [sp, #4]
 8002032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002036:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 800203a:	2000      	movs	r0, #0
 800203c:	b002      	add	sp, #8
 800203e:	4770      	bx	lr

08002040 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8002040:	b082      	sub	sp, #8
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8002042:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002046:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 8002048:	9801      	ldr	r0, [sp, #4]
}
 800204a:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800204e:	b002      	add	sp, #8
 8002050:	4770      	bx	lr

08002052 <USB_GetCurrentFrame>:
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8002052:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002056:	6880      	ldr	r0, [r0, #8]
}
 8002058:	b280      	uxth	r0, r0
 800205a:	4770      	bx	lr

0800205c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800205c:	b5f0      	push	{r4, r5, r6, r7, lr}
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 800205e:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 8002062:	eb04 1441 	add.w	r4, r4, r1, lsl #5
{
 8002066:	f89d 5018 	ldrb.w	r5, [sp, #24]
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 800206a:	f04f 36ff 	mov.w	r6, #4294967295
 800206e:	60a6      	str	r6, [r4, #8]
 8002070:	b257      	sxtb	r7, r2
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 8002072:	2d03      	cmp	r5, #3
 8002074:	d814      	bhi.n	80020a0 <USB_HC_Init+0x44>
 8002076:	e8df f005 	tbb	[pc, r5]
 800207a:	5302      	.short	0x5302
 800207c:	4d02      	.short	0x4d02
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800207e:	f240 469d 	movw	r6, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 8002082:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8002084:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8002086:	da04      	bge.n	8002092 <USB_HC_Init+0x36>
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002088:	68e6      	ldr	r6, [r4, #12]
 800208a:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 800208e:	60e6      	str	r6, [r4, #12]
 8002090:	e006      	b.n	80020a0 <USB_HC_Init+0x44>
      if(USBx != USB_OTG_FS)
 8002092:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002096:	d003      	beq.n	80020a0 <USB_HC_Init+0x44>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002098:	68e6      	ldr	r6, [r4, #12]
 800209a:	f046 0660 	orr.w	r6, r6, #96	; 0x60
 800209e:	60e6      	str	r6, [r4, #12]
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80020a0:	f8d0 c418 	ldr.w	ip, [r0, #1048]	; 0x418
 80020a4:	2601      	movs	r6, #1
 80020a6:	fa06 f101 	lsl.w	r1, r6, r1
 80020aa:	ea41 010c 	orr.w	r1, r1, ip
 80020ae:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80020b2:	6981      	ldr	r1, [r0, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80020b4:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80020b6:	02d2      	lsls	r2, r2, #11
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80020b8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80020bc:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80020c0:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80020c4:	6181      	str	r1, [r0, #24]
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80020c6:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80020c8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80020cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80020d0:	2f00      	cmp	r7, #0
 80020d2:	bfb4      	ite	lt
 80020d4:	f44f 4600 	movlt.w	r6, #32768	; 0x8000
 80020d8:	2600      	movge	r6, #0
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80020da:	f3c1 010a 	ubfx	r1, r1, #0, #11
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80020de:	2b02      	cmp	r3, #2
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80020e0:	ea4f 4385 	mov.w	r3, r5, lsl #18
 80020e4:	ea42 0201 	orr.w	r2, r2, r1
 80020e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80020ec:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80020f0:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80020f4:	ea43 0306 	orr.w	r3, r3, r6
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80020f8:	bf0c      	ite	eq
 80020fa:	f44f 3000 	moveq.w	r0, #131072	; 0x20000
 80020fe:	2000      	movne	r0, #0
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8002100:	4303      	orrs	r3, r0
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8002102:	6023      	str	r3, [r4, #0]
    
  if (ep_type == EP_TYPE_INTR)
 8002104:	2d03      	cmp	r5, #3
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8002106:	bf02      	ittt	eq
 8002108:	6823      	ldreq	r3, [r4, #0]
 800210a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 800210e:	6023      	streq	r3, [r4, #0]
  }

  return HAL_OK; 
}
 8002110:	2000      	movs	r0, #0
 8002112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8002114:	f240 669d 	movw	r6, #1693	; 0x69d
    if (epnum & 0x80U) 
 8002118:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800211a:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 800211c:	dac0      	bge.n	80020a0 <USB_HC_Init+0x44>
 800211e:	e7b3      	b.n	8002088 <USB_HC_Init+0x2c>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8002120:	f240 2625 	movw	r6, #549	; 0x225
 8002124:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8002126:	2f00      	cmp	r7, #0
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8002128:	bfbe      	ittt	lt
 800212a:	68e6      	ldrlt	r6, [r4, #12]
 800212c:	f446 76c0 	orrlt.w	r6, r6, #384	; 0x180
 8002130:	60e6      	strlt	r6, [r4, #12]
 8002132:	e7b5      	b.n	80020a0 <USB_HC_Init+0x44>

08002134 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	4613      	mov	r3, r2
 8002140:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 8002142:	2300      	movs	r3, #0
 8002144:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 8002146:	2300      	movs	r3, #0
 8002148:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 800214e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002152:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800215e:	d02b      	beq.n	80021b8 <USB_HC_StartXfer+0x84>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	791b      	ldrb	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d127      	bne.n	80021b8 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10b      	bne.n	8002186 <USB_HC_StartXfer+0x52>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	795b      	ldrb	r3, [r3, #5]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d107      	bne.n	8002186 <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	785b      	ldrb	r3, [r3, #1]
 800217a:	4619      	mov	r1, r3
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fa0f 	bl	80025a0 <USB_DoPing>
      return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e10d      	b.n	80023a2 <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d115      	bne.n	80021b8 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	785b      	ldrb	r3, [r3, #1]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219a:	4619      	mov	r1, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	785b      	ldrb	r3, [r3, #1]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80021b0:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2200      	movs	r2, #0
 80021b6:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d019      	beq.n	80021f4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	8912      	ldrh	r2, [r2, #8]
 80021c8:	4413      	add	r3, r2
 80021ca:	3b01      	subs	r3, #1
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	8912      	ldrh	r2, [r2, #8]
 80021d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80021d4:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 80021d6:	8bfa      	ldrh	r2, [r7, #30]
 80021d8:	8b3b      	ldrh	r3, [r7, #24]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d90c      	bls.n	80021f8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80021de:	8b3b      	ldrh	r3, [r7, #24]
 80021e0:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 80021e2:	8bfb      	ldrh	r3, [r7, #30]
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	8912      	ldrh	r2, [r2, #8]
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	611a      	str	r2, [r3, #16]
 80021f2:	e001      	b.n	80021f8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 80021f4:	2301      	movs	r3, #1
 80021f6:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	78db      	ldrb	r3, [r3, #3]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d007      	beq.n	8002210 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 8002200:	8bfb      	ldrh	r3, [r7, #30]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	8912      	ldrh	r2, [r2, #8]
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	785b      	ldrb	r3, [r3, #1]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4413      	add	r3, r2
 800221a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221e:	4619      	mov	r1, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8002228:	8bfb      	ldrh	r3, [r7, #30]
 800222a:	04db      	lsls	r3, r3, #19
 800222c:	4618      	mov	r0, r3
 800222e:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <USB_HC_StartXfer+0x278>)
 8002230:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8002232:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	7a9b      	ldrb	r3, [r3, #10]
 8002238:	075b      	lsls	r3, r3, #29
 800223a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 800223e:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8002240:	610b      	str	r3, [r1, #16]
  
  if (dma)
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	785b      	ldrb	r3, [r3, #1]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4413      	add	r3, r2
 8002252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	bf0c      	ite	eq
 800226e:	2301      	moveq	r3, #1
 8002270:	2300      	movne	r3, #0
 8002272:	b2db      	uxtb	r3, r3
 8002274:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	785b      	ldrb	r3, [r3, #1]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	4619      	mov	r1, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	785b      	ldrb	r3, [r3, #1]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800229a:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	785b      	ldrb	r3, [r3, #1]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	4619      	mov	r1, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	785b      	ldrb	r3, [r3, #1]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	7f7a      	ldrb	r2, [r7, #29]
 80022be:	0752      	lsls	r2, r2, #29
 80022c0:	4313      	orrs	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	785b      	ldrb	r3, [r3, #1]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022dc:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022e4:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	785b      	ldrb	r3, [r3, #1]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f4:	461a      	mov	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d14f      	bne.n	80023a0 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	78db      	ldrb	r3, [r3, #3]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d14b      	bne.n	80023a0 <USB_HC_StartXfer+0x26c>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d047      	beq.n	80023a0 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	79db      	ldrb	r3, [r3, #7]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d831      	bhi.n	800237c <USB_HC_StartXfer+0x248>
 8002318:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <USB_HC_StartXfer+0x1ec>)
 800231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231e:	bf00      	nop
 8002320:	08002331 	.word	0x08002331
 8002324:	08002355 	.word	0x08002355
 8002328:	08002331 	.word	0x08002331
 800232c:	08002355 	.word	0x08002355
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	3303      	adds	r3, #3
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 800233a:	8b7a      	ldrh	r2, [r7, #26]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	b29b      	uxth	r3, r3
 8002342:	429a      	cmp	r2, r3
 8002344:	d91c      	bls.n	8002380 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f043 0220 	orr.w	r2, r3, #32
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	619a      	str	r2, [r3, #24]
        }
        break;
 8002352:	e015      	b.n	8002380 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	3303      	adds	r3, #3
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 800235e:	8b7a      	ldrh	r2, [r7, #26]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	b29b      	uxth	r3, r3
 800236a:	429a      	cmp	r2, r3
 800236c:	d90a      	bls.n	8002384 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	619a      	str	r2, [r3, #24]
        }
        break;
 800237a:	e003      	b.n	8002384 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 800237c:	bf00      	nop
 800237e:	e002      	b.n	8002386 <USB_HC_StartXfer+0x252>
        break;
 8002380:	bf00      	nop
 8002382:	e000      	b.n	8002386 <USB_HC_StartXfer+0x252>
        break;
 8002384:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	68d9      	ldr	r1, [r3, #12]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	785a      	ldrb	r2, [r3, #1]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	b298      	uxth	r0, r3
 8002394:	2300      	movs	r3, #0
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	4603      	mov	r3, r0
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff fd48 	bl	8001e30 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	1ff80000 	.word	0x1ff80000

080023b0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	b29b      	uxth	r3, r3
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0c9b      	lsrs	r3, r3, #18
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <USB_HC_Halt+0x40>
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8002404:	0c9b      	lsrs	r3, r3, #18
 8002406:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 800240a:	2b02      	cmp	r3, #2
 800240c:	d160      	bne.n	80024d0 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	4619      	mov	r1, r3
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800242e:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d135      	bne.n	80024a8 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	4619      	mov	r1, r3
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800245c:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	4619      	mov	r1, r3
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800247e:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3301      	adds	r3, #1
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800248c:	d81e      	bhi.n	80024cc <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024a4:	d0ec      	beq.n	8002480 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80024a6:	e074      	b.n	8002592 <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b4:	4619      	mov	r1, r3
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024c8:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80024ca:	e062      	b.n	8002592 <USB_HC_Halt+0x1c4>
          break;
 80024cc:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80024ce:	e060      	b.n	8002592 <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	4619      	mov	r1, r3
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024f0:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d135      	bne.n	800256c <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250c:	4619      	mov	r1, r3
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002520:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	4619      	mov	r1, r3
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002542:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3301      	adds	r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002550:	d81e      	bhi.n	8002590 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002568:	d0ec      	beq.n	8002544 <USB_HC_Halt+0x176>
 800256a:	e012      	b.n	8002592 <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002578:	4619      	mov	r1, r3
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800258c:	600b      	str	r3, [r1, #0]
 800258e:	e000      	b.n	8002592 <USB_HC_Halt+0x1c4>
          break;
 8002590:	bf00      	nop
    }
  }
  
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	461a      	mov	r2, r3
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	04db      	lsls	r3, r3, #19
 80025c6:	4619      	mov	r1, r3
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <USB_DoPing+0x74>)
 80025ca:	400b      	ands	r3, r1
 80025cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025f2:	78fb      	ldrb	r3, [r7, #3]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	461a      	mov	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	1ff80000 	.word	0x1ff80000

08002618 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff fbc4 	bl	8001db2 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 800262a:	2110      	movs	r1, #16
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff fbdd 	bl	8001dec <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fbec 	bl	8001e10 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8002638:	2300      	movs	r3, #0
 800263a:	75fb      	strb	r3, [r7, #23]
 800263c:	e01f      	b.n	800267e <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002654:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800265c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002664:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	3301      	adds	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
 800267e:	7dfb      	ldrb	r3, [r7, #23]
 8002680:	2b0f      	cmp	r3, #15
 8002682:	d9dc      	bls.n	800263e <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8002684:	2300      	movs	r3, #0
 8002686:	75fb      	strb	r3, [r7, #23]
 8002688:	e034      	b.n	80026f4 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 800268a:	7dfb      	ldrb	r3, [r7, #23]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026a0:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026a8:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026b0:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	3301      	adds	r3, #1
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d0:	d80c      	bhi.n	80026ec <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026e8:	d0ec      	beq.n	80026c4 <USB_StopHost+0xac>
 80026ea:	e000      	b.n	80026ee <USB_StopHost+0xd6>
        break;
 80026ec:	bf00      	nop
  for (i = 0; i <= 15; i++)
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
 80026f0:	3301      	adds	r3, #1
 80026f2:	75fb      	strb	r3, [r7, #23]
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	2b0f      	cmp	r3, #15
 80026f8:	d9c7      	bls.n	800268a <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002700:	461a      	mov	r2, r3
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f04f 32ff 	mov.w	r2, #4294967295
 800270e:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff fb48 	bl	8001da6 <USB_EnableGlobalInt>
  return HAL_OK;  
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;  
}
 8002720:	2000      	movs	r0, #0
 8002722:	4770      	bx	lr

08002724 <USBH_CDC_InterfaceDeInit>:
{
 8002724:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002726:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 800272a:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 800272c:	7821      	ldrb	r1, [r4, #0]
{
 800272e:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8002730:	b139      	cbz	r1, 8002742 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8002732:	f000 fded 	bl	8003310 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8002736:	7821      	ldrb	r1, [r4, #0]
 8002738:	4628      	mov	r0, r5
 800273a:	f000 fe06 	bl	800334a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0;     /* Reset the Channel as Free */
 800273e:	2300      	movs	r3, #0
 8002740:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8002742:	7b21      	ldrb	r1, [r4, #12]
 8002744:	b141      	cbz	r1, 8002758 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8002746:	4628      	mov	r0, r5
 8002748:	f000 fde2 	bl	8003310 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800274c:	7b21      	ldrb	r1, [r4, #12]
 800274e:	4628      	mov	r0, r5
 8002750:	f000 fdfb 	bl	800334a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0;     /* Reset the Channel as Free */
 8002754:	2300      	movs	r3, #0
 8002756:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8002758:	7b61      	ldrb	r1, [r4, #13]
 800275a:	b141      	cbz	r1, 800276e <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800275c:	4628      	mov	r0, r5
 800275e:	f000 fdd7 	bl	8003310 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8002762:	7b61      	ldrb	r1, [r4, #13]
 8002764:	4628      	mov	r0, r5
 8002766:	f000 fdf0 	bl	800334a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0;     /* Reset the Channel as Free */
 800276a:	2300      	movs	r3, #0
 800276c:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 800276e:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 8002772:	69d8      	ldr	r0, [r3, #28]
 8002774:	b128      	cbz	r0, 8002782 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8002776:	f001 fa41 	bl	8003bfc <free>
    phost->pActiveClass->pData = 0;
 800277a:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]
}
 8002782:	2000      	movs	r0, #0
 8002784:	bd38      	pop	{r3, r4, r5, pc}

08002786 <USBH_CDC_InterfaceInit>:
{	
 8002786:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, 
 8002788:	2202      	movs	r2, #2
{	
 800278a:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, 
 800278c:	2301      	movs	r3, #1
 800278e:	4611      	mov	r1, r2
{	
 8002790:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, 
 8002792:	f000 f9b4 	bl	8002afe <USBH_FindInterface>
  if(interface == 0xFF) /* No Valid Interface */
 8002796:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, 
 8002798:	4606      	mov	r6, r0
  if(interface == 0xFF) /* No Valid Interface */
 800279a:	d102      	bne.n	80027a2 <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 800279c:	2002      	movs	r0, #2
}
 800279e:	b005      	add	sp, #20
 80027a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 80027a2:	4601      	mov	r1, r0
 80027a4:	4628      	mov	r0, r5
 80027a6:	f000 f9a1 	bl	8002aec <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80027aa:	2050      	movs	r0, #80	; 0x50
 80027ac:	f8d5 7374 	ldr.w	r7, [r5, #884]	; 0x374
 80027b0:	f001 fa1c 	bl	8003bec <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 80027b4:	231a      	movs	r3, #26
 80027b6:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80027ba:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 80027bc:	f896 3348 	ldrb.w	r3, [r6, #840]	; 0x348
 80027c0:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80027c2:	bf42      	ittt	mi
 80027c4:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80027c6:	f8b6 334a 	ldrhmi.w	r3, [r6, #842]	; 0x34a
 80027ca:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80027cc:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80027ce:	7841      	ldrb	r1, [r0, #1]
 80027d0:	4628      	mov	r0, r5
 80027d2:	f000 fda2 	bl	800331a <USBH_AllocPipe>
 80027d6:	4601      	mov	r1, r0
 80027d8:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 80027da:	8960      	ldrh	r0, [r4, #10]
 80027dc:	9002      	str	r0, [sp, #8]
 80027de:	2003      	movs	r0, #3
 80027e0:	9001      	str	r0, [sp, #4]
 80027e2:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80027e6:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80027ea:	7862      	ldrb	r2, [r4, #1]
 80027ec:	9000      	str	r0, [sp, #0]
 80027ee:	4628      	mov	r0, r5
 80027f0:	f000 fd7f 	bl	80032f2 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0);    
 80027f4:	2200      	movs	r2, #0
 80027f6:	7821      	ldrb	r1, [r4, #0]
 80027f8:	4628      	mov	r0, r5
 80027fa:	f001 f98e 	bl	8003b1a <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost, 
 80027fe:	2300      	movs	r3, #0
 8002800:	461a      	mov	r2, r3
 8002802:	210a      	movs	r1, #10
 8002804:	4628      	mov	r0, r5
 8002806:	f000 f97a 	bl	8002afe <USBH_FindInterface>
    if(interface == 0xFF) /* No Valid Interface */
 800280a:	28ff      	cmp	r0, #255	; 0xff
 800280c:	d0c6      	beq.n	800279c <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 800280e:	231a      	movs	r3, #26
 8002810:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8002814:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8002818:	f891 2348 	ldrb.w	r2, [r1, #840]	; 0x348
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 800281c:	f890 3350 	ldrb.w	r3, [r0, #848]	; 0x350
 8002820:	f8b1 134a 	ldrh.w	r1, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8002824:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002828:	bf0d      	iteet	eq
 800282a:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800282c:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800282e:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002830:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8002832:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002836:	bf08      	it	eq
 8002838:	73a3      	strbeq	r3, [r4, #14]
 800283a:	f8b0 2352 	ldrh.w	r2, [r0, #850]	; 0x352
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800283e:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002840:	bf18      	it	ne
 8002842:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002844:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8002846:	bf14      	ite	ne
 8002848:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800284a:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800284c:	f000 fd65 	bl	800331a <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 8002850:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002852:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 8002854:	4628      	mov	r0, r5
 8002856:	f000 fd60 	bl	800331a <USBH_AllocPipe>
 800285a:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 800285c:	8b20      	ldrh	r0, [r4, #24]
 800285e:	9002      	str	r0, [sp, #8]
 8002860:	2602      	movs	r6, #2
 8002862:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002866:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800286a:	7ba2      	ldrb	r2, [r4, #14]
 800286c:	7b61      	ldrb	r1, [r4, #13]
 800286e:	9601      	str	r6, [sp, #4]
 8002870:	9000      	str	r0, [sp, #0]
 8002872:	4628      	mov	r0, r5
 8002874:	f000 fd3d 	bl	80032f2 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8002878:	8b60      	ldrh	r0, [r4, #26]
 800287a:	9002      	str	r0, [sp, #8]
 800287c:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002880:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002884:	7be2      	ldrb	r2, [r4, #15]
 8002886:	7b21      	ldrb	r1, [r4, #12]
 8002888:	9601      	str	r6, [sp, #4]
 800288a:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 800288c:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 800288e:	4628      	mov	r0, r5
 8002890:	f000 fd2f 	bl	80032f2 <USBH_OpenPipe>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 8002894:	4632      	mov	r2, r6
 8002896:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8002898:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 800289c:	4628      	mov	r0, r5
 800289e:	f001 f93c 	bl	8003b1a <USBH_LL_SetToggle>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.InPipe,0);
 80028a2:	4632      	mov	r2, r6
 80028a4:	7b21      	ldrb	r1, [r4, #12]
 80028a6:	4628      	mov	r0, r5
 80028a8:	f001 f937 	bl	8003b1a <USBH_LL_SetToggle>
      status = USBH_OK; 
 80028ac:	4630      	mov	r0, r6
 80028ae:	e776      	b.n	800279e <USBH_CDC_InterfaceInit+0x18>

080028b0 <USBH_CDC_ClassRequest>:
{   
 80028b0:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;  
 80028b2:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 80028b6:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80028b8:	23a1      	movs	r3, #161	; 0xa1
 80028ba:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80028bc:	2321      	movs	r3, #33	; 0x21
 80028be:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 80028c0:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 80028c6:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 80028c8:	82c2      	strh	r2, [r0, #22]
 
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80028ca:	3140      	adds	r1, #64	; 0x40
{   
 80028cc:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80028ce:	f000 fa97 	bl	8002e00 <USBH_CtlReq>
  if(status == USBH_OK)
 80028d2:	4605      	mov	r5, r0
 80028d4:	b920      	cbnz	r0, 80028e0 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 80028d6:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80028da:	2102      	movs	r1, #2
 80028dc:	4620      	mov	r0, r4
 80028de:	4798      	blx	r3
}
 80028e0:	4628      	mov	r0, r5
 80028e2:	bd38      	pop	{r3, r4, r5, pc}

080028e4 <USBH_CDC_TransmitCallback>:
 80028e4:	4770      	bx	lr

080028e6 <USBH_CDC_ReceiveCallback>:
 80028e6:	4770      	bx	lr

080028e8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80028e8:	4770      	bx	lr

080028ea <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 80028ea:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 80028ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 80028f0:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 80028f2:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 80028f6:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d83d      	bhi.n	8002978 <USBH_CDC_Process+0x8e>
 80028fc:	e8df f003 	tbb	[pc, r3]
 8002900:	42170603 	.word	0x42170603
 8002904:	a8          	.byte	0xa8
 8002905:	00          	.byte	0x00
    status = USBH_OK;
 8002906:	2000      	movs	r0, #0
}
 8002908:	b002      	add	sp, #8
 800290a:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 800290c:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800290e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8002910:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8002912:	2320      	movs	r3, #32
 8002914:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002916:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 800291c:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 800291e:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecodin->Array , LINE_CODING_STRUCTURE_SIZE );  
 8002920:	f000 fa6e 	bl	8002e00 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002924:	bb50      	cbnz	r0, 800297c <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE; 
 8002926:	2302      	movs	r3, #2
      CDC_Handle->state = CDC_ERROR_STATE; 
 8002928:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800292c:	e024      	b.n	8002978 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800292e:	23a1      	movs	r3, #161	; 0xa1
 8002930:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8002932:	2321      	movs	r3, #33	; 0x21
 8002934:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002936:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 800293c:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 800293e:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002940:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8002944:	f000 fa5c 	bl	8002e00 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002948:	b9c0      	cbnz	r0, 800297c <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 800294a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800294c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE; 
 800294e:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 8002952:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800295c:	4291      	cmp	r1, r2
 800295e:	d10b      	bne.n	8002978 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8002960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002964:	795a      	ldrb	r2, [r3, #5]
 8002966:	4291      	cmp	r1, r2
 8002968:	d106      	bne.n	8002978 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800296a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d102      	bne.n	8002978 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 8002972:	4628      	mov	r0, r5
 8002974:	f7ff ffb8 	bl	80028e8 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8002978:	2001      	movs	r0, #1
 800297a:	e7c5      	b.n	8002908 <USBH_CDC_Process+0x1e>
    else if(req_status != USBH_BUSY)
 800297c:	2801      	cmp	r0, #1
 800297e:	d0fb      	beq.n	8002978 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_ERROR_STATE; 
 8002980:	2304      	movs	r3, #4
 8002982:	e7d1      	b.n	8002928 <USBH_CDC_Process+0x3e>
  switch(CDC_Handle->data_tx_state)
 8002984:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8002988:	2901      	cmp	r1, #1
 800298a:	d023      	beq.n	80029d4 <USBH_CDC_Process+0xea>
 800298c:	2902      	cmp	r1, #2
 800298e:	d030      	beq.n	80029f2 <USBH_CDC_Process+0x108>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002990:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 8002994:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8002996:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 800299a:	2b03      	cmp	r3, #3
 800299c:	d047      	beq.n	8002a2e <USBH_CDC_Process+0x144>
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d1ea      	bne.n	8002978 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe); 
 80029a2:	7b31      	ldrb	r1, [r6, #12]
 80029a4:	4628      	mov	r0, r5
 80029a6:	f001 f8a7 	bl	8003af8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 80029aa:	2801      	cmp	r0, #1
 80029ac:	d1e4      	bne.n	8002978 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80029ae:	7b31      	ldrb	r1, [r6, #12]
 80029b0:	4628      	mov	r0, r5
 80029b2:	f001 f85d 	bl	8003a70 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 80029b6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80029b8:	b282      	uxth	r2, r0
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 80029ba:	4293      	cmp	r3, r2
 80029bc:	4610      	mov	r0, r2
 80029be:	d040      	beq.n	8002a42 <USBH_CDC_Process+0x158>
 80029c0:	8b71      	ldrh	r1, [r6, #26]
 80029c2:	4291      	cmp	r1, r2
 80029c4:	d23d      	bcs.n	8002a42 <USBH_CDC_Process+0x158>
        CDC_Handle->RxDataLength -= length ;
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80029ca:	6a33      	ldr	r3, [r6, #32]
 80029cc:	4418      	add	r0, r3
 80029ce:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 80029d0:	2303      	movs	r3, #3
 80029d2:	e033      	b.n	8002a3c <USBH_CDC_Process+0x152>
    if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80029d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80029d6:	8b22      	ldrh	r2, [r4, #24]
 80029d8:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 80029da:	9100      	str	r1, [sp, #0]
    if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80029dc:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 80029de:	bf98      	it	ls
 80029e0:	b282      	uxthls	r2, r0
 80029e2:	69e1      	ldr	r1, [r4, #28]
 80029e4:	4628      	mov	r0, r5
 80029e6:	f000 fc5d 	bl	80032a4 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80029ea:	2302      	movs	r3, #2
      CDC_Handle->data_tx_state = CDC_SEND_DATA; 
 80029ec:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80029f0:	e7ce      	b.n	8002990 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe); 
 80029f2:	7b61      	ldrb	r1, [r4, #13]
 80029f4:	f001 f880 	bl	8003af8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 80029f8:	2801      	cmp	r0, #1
 80029fa:	d115      	bne.n	8002a28 <USBH_CDC_Process+0x13e>
      if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80029fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029fe:	8b22      	ldrh	r2, [r4, #24]
 8002a00:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize ;
 8002a02:	bf83      	ittte	hi
 8002a04:	1a9b      	subhi	r3, r3, r2
 8002a06:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002a08:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0;
 8002a0a:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002a0c:	bf8a      	itet	hi
 8002a0e:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0;
 8002a10:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002a12:	61e3      	strhi	r3, [r4, #28]
      if( CDC_Handle->TxDataLength > 0)
 8002a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a16:	b10b      	cbz	r3, 8002a1c <USBH_CDC_Process+0x132>
      CDC_Handle->data_tx_state = CDC_SEND_DATA; 
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e7e7      	b.n	80029ec <USBH_CDC_Process+0x102>
        CDC_Handle->data_tx_state = CDC_IDLE;    
 8002a1c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8002a20:	4628      	mov	r0, r5
 8002a22:	f7ff ff5f 	bl	80028e4 <USBH_CDC_TransmitCallback>
 8002a26:	e7b3      	b.n	8002990 <USBH_CDC_Process+0xa6>
    else if( URB_Status == USBH_URB_NOTREADY )
 8002a28:	2802      	cmp	r0, #2
 8002a2a:	d1b1      	bne.n	8002990 <USBH_CDC_Process+0xa6>
 8002a2c:	e7f4      	b.n	8002a18 <USBH_CDC_Process+0x12e>
    USBH_BulkReceiveData (phost,
 8002a2e:	7b33      	ldrb	r3, [r6, #12]
 8002a30:	8b72      	ldrh	r2, [r6, #26]
 8002a32:	6a31      	ldr	r1, [r6, #32]
 8002a34:	4628      	mov	r0, r5
 8002a36:	f000 fc4c 	bl	80032d2 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8002a3a:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 8002a3c:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8002a40:	e79a      	b.n	8002978 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8002a48:	4628      	mov	r0, r5
 8002a4a:	f7ff ff4c 	bl	80028e6 <USBH_CDC_ReceiveCallback>
 8002a4e:	e793      	b.n	8002978 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00); 
 8002a50:	2100      	movs	r1, #0
 8002a52:	f000 fbe1 	bl	8003218 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d18e      	bne.n	8002978 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8002a5a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8002a5e:	e78b      	b.n	8002978 <USBH_CDC_Process+0x8e>

08002a60 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8002a60:	f500 735f 	add.w	r3, r0, #892	; 0x37c
 8002a64:	f500 726e 	add.w	r2, r0, #952	; 0x3b8
  uint32_t i = 0;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0;
 8002a68:	2100      	movs	r1, #0
 8002a6a:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d1fb      	bne.n	8002a6a <DeInitStateMachine+0xa>
 8002a72:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8002a76:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8002a80:	4291      	cmp	r1, r2
 8002a82:	d1fb      	bne.n	8002a7c <DeInitStateMachine+0x1c>
  }
  
  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8002a84:	2201      	movs	r2, #1
  phost->Timer = 0;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8002a86:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8002a88:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8002a8a:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8002a8c:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0;  
 8002a8e:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
  phost->Control.state = CTRL_SETUP;
 8002a92:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8002a94:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0;
 8002a96:	7643      	strb	r3, [r0, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8002a98:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8002a9c:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d
  
  return USBH_OK;
}
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	4770      	bx	lr

08002aa4 <USBH_Init>:
{
 8002aa4:	b538      	push	{r3, r4, r5, lr}
 8002aa6:	460d      	mov	r5, r1
  if(phost == NULL)
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	b180      	cbz	r0, 8002ace <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8002aac:	2300      	movs	r3, #0
  phost->id = id;
 8002aae:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  phost->pActiveClass = NULL;
 8002ab2:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
  phost->ClassNumber = 0;
 8002ab6:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  DeInitStateMachine(phost);
 8002aba:	f7ff ffd1 	bl	8002a60 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8002abe:	b10d      	cbz	r5, 8002ac4 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8002ac0:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
  USBH_LL_Init(phost);
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	f000 ff6f 	bl	80039a8 <USBH_LL_Init>
  return USBH_OK;
 8002aca:	2000      	movs	r0, #0
 8002acc:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL; 
 8002ace:	2002      	movs	r0, #2
}
 8002ad0:	bd38      	pop	{r3, r4, r5, pc}

08002ad2 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(pclass != 0)
 8002ad2:	b149      	cbz	r1, 8002ae8 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8002ad4:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8002ad8:	b933      	cbnz	r3, 8002ae8 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8002ada:	2201      	movs	r2, #1
 8002adc:	f8c0 2378 	str.w	r2, [r0, #888]	; 0x378
 8002ae0:	f8c0 1370 	str.w	r1, [r0, #880]	; 0x370
      status = USBH_OK;
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 8002ae8:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002aea:	4770      	bx	lr

08002aec <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8002aec:	f890 3336 	ldrb.w	r3, [r0, #822]	; 0x336
 8002af0:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8002af2:	bf86      	itte	hi
 8002af4:	f880 131f 	strbhi.w	r1, [r0, #799]	; 0x31f
  USBH_StatusTypeDef   status = USBH_OK;
 8002af8:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 8002afa:	2002      	movls	r0, #2
  }
  return status;  
}
 8002afc:	4770      	bx	lr

08002afe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8002afe:	b530      	push	{r4, r5, lr}
 8002b00:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8002b02:	f890 5341 	ldrb.w	r5, [r0, #833]	; 0x341
 8002b06:	428d      	cmp	r5, r1
 8002b08:	d001      	beq.n	8002b0e <USBH_FindInterface+0x10>
 8002b0a:	29ff      	cmp	r1, #255	; 0xff
 8002b0c:	d10d      	bne.n	8002b2a <USBH_FindInterface+0x2c>
 8002b0e:	f890 5342 	ldrb.w	r5, [r0, #834]	; 0x342
 8002b12:	4295      	cmp	r5, r2
 8002b14:	d001      	beq.n	8002b1a <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8002b16:	2aff      	cmp	r2, #255	; 0xff
 8002b18:	d107      	bne.n	8002b2a <USBH_FindInterface+0x2c>
 8002b1a:	f890 5343 	ldrb.w	r5, [r0, #835]	; 0x343
 8002b1e:	429d      	cmp	r5, r3
 8002b20:	d101      	bne.n	8002b26 <USBH_FindInterface+0x28>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
    {
      return  if_ix;
 8002b22:	b2e0      	uxtb	r0, r4
 8002b24:	bd30      	pop	{r4, r5, pc}
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8002b26:	2bff      	cmp	r3, #255	; 0xff
 8002b28:	d0fb      	beq.n	8002b22 <USBH_FindInterface+0x24>
 8002b2a:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8002b2c:	2c02      	cmp	r4, #2
 8002b2e:	f100 001a 	add.w	r0, r0, #26
 8002b32:	d1e6      	bne.n	8002b02 <USBH_FindInterface+0x4>
    }
    if_ix++;
  }
  return 0xFF;
 8002b34:	20ff      	movs	r0, #255	; 0xff
}
 8002b36:	bd30      	pop	{r4, r5, pc}

08002b38 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8002b3c:	f000 ff60 	bl	8003a00 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 8002b40:	2101      	movs	r1, #1
 8002b42:	4620      	mov	r0, r4
 8002b44:	f000 ffdc 	bl	8003b00 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
}
 8002b48:	2000      	movs	r0, #0
 8002b4a:	bd10      	pop	{r4, pc}

08002b4c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8002b4c:	b530      	push	{r4, r5, lr}
 8002b4e:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8002b50:	2302      	movs	r3, #2
 8002b52:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0;
  
  switch (phost->gState)
 8002b56:	7803      	ldrb	r3, [r0, #0]
{
 8002b58:	4604      	mov	r4, r0
  switch (phost->gState)
 8002b5a:	2b0a      	cmp	r3, #10
 8002b5c:	d817      	bhi.n	8002b8e <USBH_Process+0x42>
 8002b5e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b62:	000b      	.short	0x000b
 8002b64:	00190016 	.word	0x00190016
 8002b68:	00160101 	.word	0x00160101
 8002b6c:	00e90049 	.word	0x00e90049
 8002b70:	00c100b8 	.word	0x00c100b8
 8002b74:	00f900ca 	.word	0x00f900ca
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 8002b78:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 8002b7c:	b13b      	cbz	r3, 8002b8e <USBH_Process+0x42>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 8002b7e:	2301      	movs	r3, #1
 8002b80:	7003      	strb	r3, [r0, #0]
      USBH_Delay(200); 
 8002b82:	20c8      	movs	r0, #200	; 0xc8
 8002b84:	f000 ffd8 	bl	8003b38 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f000 ff63 	bl	8003a54 <USBH_LL_ResetPort>
  case HOST_ABORT_STATE:
  default :
    break;
  }
 return USBH_OK;  
}
 8002b8e:	2000      	movs	r0, #0
 8002b90:	b007      	add	sp, #28
 8002b92:	bd30      	pop	{r4, r5, pc}
    USBH_Delay(100); 
 8002b94:	2064      	movs	r0, #100	; 0x64
 8002b96:	f000 ffcf 	bl	8003b38 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f000 ff4c 	bl	8003a38 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8002ba0:	2305      	movs	r3, #5
 8002ba2:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8002ba4:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4620      	mov	r0, r4
 8002bac:	f000 fbb5 	bl	800331a <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8002bb0:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8002bb2:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f000 fbb0 	bl	800331a <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8002bba:	79a2      	ldrb	r2, [r4, #6]
 8002bbc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8002bc0:	7120      	strb	r0, [r4, #4]
 8002bc2:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 8002bc4:	9202      	str	r2, [sp, #8]
 8002bc6:	2500      	movs	r5, #0
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8002bc8:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8002bcc:	9200      	str	r2, [sp, #0]
 8002bce:	9501      	str	r5, [sp, #4]
 8002bd0:	2280      	movs	r2, #128	; 0x80
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f000 fb8d 	bl	80032f2 <USBH_OpenPipe>
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8002bd8:	79a2      	ldrb	r2, [r4, #6]
 8002bda:	9202      	str	r2, [sp, #8]
 8002bdc:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8002be0:	9200      	str	r2, [sp, #0]
 8002be2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8002be6:	7961      	ldrb	r1, [r4, #5]
 8002be8:	9501      	str	r5, [sp, #4]
 8002bea:	462a      	mov	r2, r5
 8002bec:	4620      	mov	r0, r4
 8002bee:	f000 fb80 	bl	80032f2 <USBH_OpenPipe>
 8002bf2:	e7cc      	b.n	8002b8e <USBH_Process+0x42>
  switch (phost->EnumState)
 8002bf4:	7843      	ldrb	r3, [r0, #1]
 8002bf6:	2b07      	cmp	r3, #7
 8002bf8:	d8c9      	bhi.n	8002b8e <USBH_Process+0x42>
 8002bfa:	e8df f003 	tbb	[pc, r3]
 8002bfe:	1404      	.short	0x1404
 8002c00:	3c342d1c 	.word	0x3c342d1c
 8002c04:	5548      	.short	0x5548
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 8002c06:	2108      	movs	r1, #8
 8002c08:	f000 f9d3 	bl	8002fb2 <USBH_Get_DevDesc>
 8002c0c:	4605      	mov	r5, r0
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	d1bd      	bne.n	8002b8e <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8002c12:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8002c14:	f894 2327 	ldrb.w	r2, [r4, #807]	; 0x327
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8002c18:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8002c1a:	7921      	ldrb	r1, [r4, #4]
 8002c1c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8002c20:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8002c22:	9202      	str	r2, [sp, #8]
 8002c24:	e7d0      	b.n	8002bc8 <USBH_Process+0x7c>
    }
    break;
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8002c26:	2112      	movs	r1, #18
 8002c28:	f000 f9c3 	bl	8002fb2 <USBH_Get_DevDesc>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d1ae      	bne.n	8002b8e <USBH_Process+0x42>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 8002c30:	2302      	movs	r3, #2
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8002c32:	7063      	strb	r3, [r4, #1]
 8002c34:	e7ab      	b.n	8002b8e <USBH_Process+0x42>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8002c36:	2101      	movs	r1, #1
 8002c38:	f000 fad2 	bl	80031e0 <USBH_SetAddress>
 8002c3c:	4605      	mov	r5, r0
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d1a5      	bne.n	8002b8e <USBH_Process+0x42>
      USBH_Delay(2);
 8002c42:	2002      	movs	r0, #2
 8002c44:	f000 ff78 	bl	8003b38 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8002c48:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8002c4a:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 8002c4c:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8002c4e:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8002c52:	7921      	ldrb	r1, [r4, #4]
 8002c54:	79a2      	ldrb	r2, [r4, #6]
 8002c56:	e7e4      	b.n	8002c22 <USBH_Process+0xd6>
    if ( USBH_Get_CfgDesc(phost, 
 8002c58:	2109      	movs	r1, #9
 8002c5a:	f000 fa03 	bl	8003064 <USBH_Get_CfgDesc>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d195      	bne.n	8002b8e <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8002c62:	2304      	movs	r3, #4
 8002c64:	e7e5      	b.n	8002c32 <USBH_Process+0xe6>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 8002c66:	f8b0 1334 	ldrh.w	r1, [r0, #820]	; 0x334
 8002c6a:	f000 f9fb 	bl	8003064 <USBH_Get_CfgDesc>
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d18d      	bne.n	8002b8e <USBH_Process+0x42>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 8002c72:	2305      	movs	r3, #5
 8002c74:	e7dd      	b.n	8002c32 <USBH_Process+0xe6>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 8002c76:	f890 132e 	ldrb.w	r1, [r0, #814]	; 0x32e
 8002c7a:	b131      	cbz	r1, 8002c8a <USBH_Process+0x13e>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 8002c7c:	23ff      	movs	r3, #255	; 0xff
 8002c7e:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8002c82:	f000 fa86 	bl	8003192 <USBH_Get_StringDesc>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d181      	bne.n	8002b8e <USBH_Process+0x42>
                                phost->device.Data , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8002c8a:	2306      	movs	r3, #6
 8002c8c:	e7d1      	b.n	8002c32 <USBH_Process+0xe6>
#endif       
    }
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 8002c8e:	f890 132f 	ldrb.w	r1, [r0, #815]	; 0x32f
 8002c92:	b139      	cbz	r1, 8002ca4 <USBH_Process+0x158>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8002c94:	23ff      	movs	r3, #255	; 0xff
 8002c96:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8002c9a:	f000 fa7a 	bl	8003192 <USBH_Get_StringDesc>
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	f47f af75 	bne.w	8002b8e <USBH_Process+0x42>
                               phost->device.Data, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 8002ca4:	2307      	movs	r3, #7
 8002ca6:	e7c4      	b.n	8002c32 <USBH_Process+0xe6>
#endif        
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 8002ca8:	f890 1330 	ldrb.w	r1, [r0, #816]	; 0x330
 8002cac:	b139      	cbz	r1, 8002cbe <USBH_Process+0x172>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 8002cae:	23ff      	movs	r3, #255	; 0xff
 8002cb0:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8002cb4:	f000 fa6d 	bl	8003192 <USBH_Get_StringDesc>
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	f47f af68 	bne.w	8002b8e <USBH_Process+0x42>
      phost->device.current_interface = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 8002cc4:	f894 3331 	ldrb.w	r3, [r4, #817]	; 0x331
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d009      	beq.n	8002ce0 <USBH_Process+0x194>
        phost->gState  = HOST_INPUT; 
 8002ccc:	2307      	movs	r3, #7
      phost->gState  = HOST_ABORT_STATE;
 8002cce:	7023      	strb	r3, [r4, #0]
 8002cd0:	e75d      	b.n	8002b8e <USBH_Process+0x42>
      if(phost->pUser != NULL)
 8002cd2:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f43f af59 	beq.w	8002b8e <USBH_Process+0x42>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8002cdc:	2101      	movs	r1, #1
 8002cde:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	e7f4      	b.n	8002cce <USBH_Process+0x182>
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8002ce4:	f890 1337 	ldrb.w	r1, [r0, #823]	; 0x337
 8002ce8:	f000 fa88 	bl	80031fc <USBH_SetCfg>
 8002cec:	2800      	cmp	r0, #0
 8002cee:	f47f af4e 	bne.w	8002b8e <USBH_Process+0x42>
      phost->gState  = HOST_CHECK_CLASS;
 8002cf2:	2309      	movs	r3, #9
 8002cf4:	e7eb      	b.n	8002cce <USBH_Process+0x182>
    if(phost->ClassNumber == 0)
 8002cf6:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f43f af47 	beq.w	8002b8e <USBH_Process+0x42>
      phost->pActiveClass = NULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8002d06:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
 8002d0a:	f890 2341 	ldrb.w	r2, [r0, #833]	; 0x341
 8002d0e:	7919      	ldrb	r1, [r3, #4]
 8002d10:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8002d12:	bf08      	it	eq
 8002d14:	f8c0 3374 	streq.w	r3, [r0, #884]	; 0x374
      if(phost->pActiveClass != NULL)
 8002d18:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8002d1c:	b1c3      	cbz	r3, 8002d50 <USBH_Process+0x204>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4798      	blx	r3
 8002d22:	b9a8      	cbnz	r0, 8002d50 <USBH_Process+0x204>
          phost->gState  = HOST_CLASS_REQUEST; 
 8002d24:	2306      	movs	r3, #6
 8002d26:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 8002d28:	2103      	movs	r1, #3
 8002d2a:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8002d2e:	4620      	mov	r0, r4
 8002d30:	4798      	blx	r3
 8002d32:	e72c      	b.n	8002b8e <USBH_Process+0x42>
    if(phost->pActiveClass != NULL)
 8002d34:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8002d38:	b153      	cbz	r3, 8002d50 <USBH_Process+0x204>
      status = phost->pActiveClass->Requests(phost);
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	4798      	blx	r3
 8002d3e:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8002d42:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f47f af21 	bne.w	8002b8e <USBH_Process+0x42>
        phost->gState  = HOST_CLASS;        
 8002d4c:	230a      	movs	r3, #10
 8002d4e:	e7be      	b.n	8002cce <USBH_Process+0x182>
      phost->gState  = HOST_ABORT_STATE;
 8002d50:	230c      	movs	r3, #12
 8002d52:	e7bc      	b.n	8002cce <USBH_Process+0x182>
    if(phost->pActiveClass != NULL)
 8002d54:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f43f af18 	beq.w	8002b8e <USBH_Process+0x42>
      phost->pActiveClass->BgndProcess(phost);
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	4798      	blx	r3
 8002d62:	e714      	b.n	8002b8e <USBH_Process+0x42>
    DeInitStateMachine(phost);  
 8002d64:	f7ff fe7c 	bl	8002a60 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8002d68:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f43f af0e 	beq.w	8002b8e <USBH_Process+0x42>
      phost->pActiveClass->DeInit(phost); 
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4620      	mov	r0, r4
 8002d76:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
 return USBH_OK;  
 8002d7e:	e706      	b.n	8002b8e <USBH_Process+0x42>

08002d80 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8002d80:	f8c0 13b8 	str.w	r1, [r0, #952]	; 0x3b8
 8002d84:	4770      	bx	lr

08002d86 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
  phost->Timer ++;
 8002d86:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
 8002d8a:	3201      	adds	r2, #1
 8002d8c:	f8c0 23b8 	str.w	r2, [r0, #952]	; 0x3b8
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8002d90:	7802      	ldrb	r2, [r0, #0]
 8002d92:	2a0a      	cmp	r2, #10
 8002d94:	d104      	bne.n	8002da0 <USBH_LL_IncTimer+0x1a>
 8002d96:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8002d9a:	b10b      	cbz	r3, 8002da0 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	4718      	bx	r3
 8002da0:	4770      	bx	lr

08002da2 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8002da2:	7802      	ldrb	r2, [r0, #0]
{
 8002da4:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8002da6:	b94a      	cbnz	r2, 8002dbc <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1;
    
    if(phost->pUser != NULL)
 8002da8:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
    phost->device.is_connected = 1;
 8002dac:	2201      	movs	r2, #1
 8002dae:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8002db2:	b10b      	cbz	r3, 8002db8 <USBH_LL_Connect+0x16>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 8002db4:	2104      	movs	r1, #4
 8002db6:	4798      	blx	r3
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 8002db8:	2000      	movs	r0, #0
 8002dba:	bd08      	pop	{r3, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8002dbc:	7802      	ldrb	r2, [r0, #0]
 8002dbe:	2a01      	cmp	r2, #1
    phost->gState = HOST_DEV_ATTACHED ;
 8002dc0:	bf04      	itt	eq
 8002dc2:	2202      	moveq	r2, #2
 8002dc4:	7002      	strbeq	r2, [r0, #0]
 8002dc6:	e7f7      	b.n	8002db8 <USBH_LL_Connect+0x16>

08002dc8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	4604      	mov	r4, r0
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 8002dcc:	f000 fe26 	bl	8003a1c <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8002dd0:	7921      	ldrb	r1, [r4, #4]
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f000 fab9 	bl	800334a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8002dd8:	7961      	ldrb	r1, [r4, #5]
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f000 fab5 	bl	800334a <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8002de0:	2300      	movs	r3, #0
 8002de2:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 8002de6:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8002dea:	b113      	cbz	r3, 8002df2 <USBH_LL_Disconnect+0x2a>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8002dec:	2105      	movs	r1, #5
 8002dee:	4620      	mov	r0, r4
 8002df0:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8002df2:	4620      	mov	r0, r4
 8002df4:	f000 fe04 	bl	8003a00 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	7023      	strb	r3, [r4, #0]
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	bd10      	pop	{r4, pc}

08002e00 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8002e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e02:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8002e04:	7880      	ldrb	r0, [r0, #2]
 8002e06:	2801      	cmp	r0, #1
 8002e08:	d003      	beq.n	8002e12 <USBH_CtlReq+0x12>
 8002e0a:	2802      	cmp	r0, #2
 8002e0c:	d008      	beq.n	8002e20 <USBH_CtlReq+0x20>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8002e0e:	2001      	movs	r0, #1
 8002e10:	e004      	b.n	8002e1c <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 8002e12:	2302      	movs	r3, #2
    phost->Control.buff = buff; 
 8002e14:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 8002e16:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;  
 8002e18:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8002e1a:	70a3      	strb	r3, [r4, #2]
}
 8002e1c:	b003      	add	sp, #12
 8002e1e:	bd30      	pop	{r4, r5, pc}
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  
  switch (phost->Control.state)
 8002e20:	7e23      	ldrb	r3, [r4, #24]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	2b0a      	cmp	r3, #10
 8002e26:	d8f2      	bhi.n	8002e0e <USBH_CtlReq+0xe>
 8002e28:	e8df f003 	tbb	[pc, r3]
 8002e2c:	31260f06 	.word	0x31260f06
 8002e30:	6b604a3d 	.word	0x6b604a3d
 8002e34:	897c      	.short	0x897c
 8002e36:	92          	.byte	0x92
 8002e37:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
 8002e38:	7962      	ldrb	r2, [r4, #5]
 8002e3a:	f104 0110 	add.w	r1, r4, #16
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f000 f9f8 	bl	8003234 <USBH_CtlSendSetup>
	                   (uint8_t *)phost->Control.setup.d8 , 
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 8002e44:	2302      	movs	r3, #2
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8002e46:	7623      	strb	r3, [r4, #24]
 8002e48:	e7e1      	b.n	8002e0e <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 8002e4a:	7961      	ldrb	r1, [r4, #5]
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f000 fe53 	bl	8003af8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8002e52:	2801      	cmp	r0, #1
 8002e54:	d123      	bne.n	8002e9e <USBH_CtlReq+0x9e>
      if (phost->Control.setup.b.wLength.w != 0 )
 8002e56:	8ae2      	ldrh	r2, [r4, #22]
 8002e58:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8002e5c:	b132      	cbz	r2, 8002e6c <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	da02      	bge.n	8002e68 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 8002e62:	2303      	movs	r3, #3
 8002e64:	7623      	strb	r3, [r4, #24]
 8002e66:	e7d9      	b.n	8002e1c <USBH_CtlReq+0x1c>
          phost->Control.state = CTRL_DATA_OUT;
 8002e68:	2305      	movs	r3, #5
 8002e6a:	e7ec      	b.n	8002e46 <USBH_CtlReq+0x46>
        if (direction == USB_D2H)
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	da01      	bge.n	8002e74 <USBH_CtlReq+0x74>
      phost->Control.state = CTRL_STATUS_OUT;
 8002e70:	2309      	movs	r3, #9
 8002e72:	e7e8      	b.n	8002e46 <USBH_CtlReq+0x46>
          phost->Control.state = CTRL_STATUS_IN;
 8002e74:	2307      	movs	r3, #7
 8002e76:	e7e6      	b.n	8002e46 <USBH_CtlReq+0x46>
     phost->Control.timer = phost->Timer;
 8002e78:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8002e7c:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8002e7e:	89a2      	ldrh	r2, [r4, #12]
 8002e80:	7923      	ldrb	r3, [r4, #4]
 8002e82:	68a1      	ldr	r1, [r4, #8]
 8002e84:	4620      	mov	r0, r4
 8002e86:	f000 f9fd 	bl	8003284 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	e7db      	b.n	8002e46 <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8002e8e:	7921      	ldrb	r1, [r4, #4]
 8002e90:	4620      	mov	r0, r4
 8002e92:	f000 fe31 	bl	8003af8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8002e96:	2801      	cmp	r0, #1
 8002e98:	d0ea      	beq.n	8002e70 <USBH_CtlReq+0x70>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 8002e9a:	2805      	cmp	r0, #5
 8002e9c:	d01a      	beq.n	8002ed4 <USBH_CtlReq+0xd4>
    else if(URB_Status == USBH_URB_ERROR)
 8002e9e:	2804      	cmp	r0, #4
 8002ea0:	d1b5      	bne.n	8002e0e <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;
 8002ea2:	230b      	movs	r3, #11
 8002ea4:	e7cf      	b.n	8002e46 <USBH_CtlReq+0x46>
    }
    break;
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 8002ea6:	2501      	movs	r5, #1
 8002ea8:	7963      	ldrb	r3, [r4, #5]
 8002eaa:	89a2      	ldrh	r2, [r4, #12]
 8002eac:	9500      	str	r5, [sp, #0]
 8002eae:	68a1      	ldr	r1, [r4, #8]
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f000 f9d0 	bl	8003256 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8002eb6:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8002eba:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8002ebc:	2306      	movs	r3, #6
 8002ebe:	e7c2      	b.n	8002e46 <USBH_CtlReq+0x46>
    break;
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 8002ec0:	7961      	ldrb	r1, [r4, #5]
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f000 fe18 	bl	8003af8 <USBH_LL_GetURBState>
    
    if  (URB_Status == USBH_URB_DONE)
 8002ec8:	2801      	cmp	r0, #1
 8002eca:	d0d3      	beq.n	8002e74 <USBH_CtlReq+0x74>
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    
    /* handle error cases */
    else if  (URB_Status == USBH_URB_STALL) 
 8002ecc:	2805      	cmp	r0, #5
 8002ece:	d103      	bne.n	8002ed8 <USBH_CtlReq+0xd8>
    { 
      /* In stall case, return to previous machine state*/
      phost->Control.state = CTRL_STALLED; 
 8002ed0:	230c      	movs	r3, #12
 8002ed2:	7623      	strb	r3, [r4, #24]
#endif      
    }
     else if(URB_Status == USBH_URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      status = USBH_NOT_SUPPORTED;
 8002ed4:	2003      	movs	r0, #3
 8002ed6:	e7a1      	b.n	8002e1c <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8002ed8:	2802      	cmp	r0, #2
 8002eda:	d0c5      	beq.n	8002e68 <USBH_CtlReq+0x68>
    else if (URB_Status == USBH_URB_ERROR)
 8002edc:	2804      	cmp	r0, #4
 8002ede:	d196      	bne.n	8002e0e <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;  
 8002ee0:	230b      	movs	r3, #11
 8002ee2:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	70a3      	strb	r3, [r4, #2]
      status = USBH_FAIL;
 8002ee8:	2002      	movs	r0, #2
  return status;
 8002eea:	e797      	b.n	8002e1c <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 8002eec:	2200      	movs	r2, #0
 8002eee:	7923      	ldrb	r3, [r4, #4]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	f000 f9c6 	bl	8003284 <USBH_CtlReceiveData>
    phost->Control.timer = phost->Timer;
 8002ef8:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8002efc:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8002efe:	2308      	movs	r3, #8
 8002f00:	e7a1      	b.n	8002e46 <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8002f02:	7921      	ldrb	r1, [r4, #4]
 8002f04:	4620      	mov	r0, r4
 8002f06:	f000 fdf7 	bl	8003af8 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8002f0a:	2801      	cmp	r0, #1
 8002f0c:	d104      	bne.n	8002f18 <USBH_CtlReq+0x118>
      phost->RequestState = CMD_SEND;
 8002f0e:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;  
 8002f10:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8002f12:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;  
 8002f14:	7620      	strb	r0, [r4, #24]
 8002f16:	e781      	b.n	8002e1c <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 8002f18:	2804      	cmp	r0, #4
 8002f1a:	d0c2      	beq.n	8002ea2 <USBH_CtlReq+0xa2>
     else if(URB_Status == USBH_URB_STALL)
 8002f1c:	2805      	cmp	r0, #5
 8002f1e:	f47f af76 	bne.w	8002e0e <USBH_CtlReq+0xe>
 8002f22:	e7d7      	b.n	8002ed4 <USBH_CtlReq+0xd4>
#endif      
    }
    break;
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8002f24:	2200      	movs	r2, #0
 8002f26:	2501      	movs	r5, #1
 8002f28:	7963      	ldrb	r3, [r4, #5]
 8002f2a:	9500      	str	r5, [sp, #0]
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f000 f991 	bl	8003256 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8002f34:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8002f38:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8002f3a:	230a      	movs	r3, #10
 8002f3c:	e783      	b.n	8002e46 <USBH_CtlReq+0x46>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8002f3e:	7961      	ldrb	r1, [r4, #5]
 8002f40:	4620      	mov	r0, r4
 8002f42:	f000 fdd9 	bl	8003af8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8002f46:	2801      	cmp	r0, #1
 8002f48:	d0e1      	beq.n	8002f0e <USBH_CtlReq+0x10e>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
 8002f4a:	2802      	cmp	r0, #2
 8002f4c:	d1a7      	bne.n	8002e9e <USBH_CtlReq+0x9e>
 8002f4e:	e78f      	b.n	8002e70 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8002f50:	7e63      	ldrb	r3, [r4, #25]
 8002f52:	3301      	adds	r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	7663      	strb	r3, [r4, #25]
 8002f5a:	d806      	bhi.n	8002f6a <USBH_CtlReq+0x16a>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f000 fd5d 	bl	8003a1c <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8002f62:	2001      	movs	r0, #1
 8002f64:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 8002f66:	70a0      	strb	r0, [r4, #2]
 8002f68:	e758      	b.n	8002e1c <USBH_CtlReq+0x1c>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8002f6a:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8002f6e:	2106      	movs	r1, #6
 8002f70:	4620      	mov	r0, r4
 8002f72:	4798      	blx	r3
      phost->Control.errorcount = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	7663      	strb	r3, [r4, #25]
 8002f78:	e7b4      	b.n	8002ee4 <USBH_CtlReq+0xe4>

08002f7a <USBH_GetDescriptor>:
{ 
 8002f7a:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8002f7c:	7884      	ldrb	r4, [r0, #2]
{ 
 8002f7e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8002f82:	2c01      	cmp	r4, #1
 8002f84:	d110      	bne.n	8002fa8 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8002f86:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8002f8a:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8002f8c:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8002f90:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8002f94:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8002f96:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409;
 8002f9a:	bf0c      	ite	eq
 8002f9c:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0;
 8002fa0:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8002fa2:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0;
 8002fa4:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length; 
 8002fa6:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff , length );     
 8002fa8:	462a      	mov	r2, r5
 8002faa:	4619      	mov	r1, r3
}
 8002fac:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff , length );     
 8002fae:	f7ff bf27 	b.w	8002e00 <USBH_CtlReq>

08002fb2 <USBH_Get_DevDesc>:
{
 8002fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8002fb4:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8002fb8:	460d      	mov	r5, r1
 8002fba:	9100      	str	r1, [sp, #0]
 8002fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fc0:	2100      	movs	r1, #0
{
 8002fc2:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8002fc4:	f7ff ffd9 	bl	8002f7a <USBH_GetDescriptor>
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	d149      	bne.n	8003060 <USBH_Get_DevDesc+0xae>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8002fcc:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8002fd0:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8002fd4:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8002fd8:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8002fdc:	f894 211f 	ldrb.w	r2, [r4, #287]	; 0x11f
 8002fe0:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8002fe4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002fe8:	f8a4 3322 	strh.w	r3, [r4, #802]	; 0x322
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8002fec:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8002ff0:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8002ff4:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8002ff8:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8002ffc:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8003000:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  if (length > 8)
 8003004:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8003006:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 800300a:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  if (length > 8)
 800300e:	d927      	bls.n	8003060 <USBH_Get_DevDesc+0xae>
    dev_desc->idVendor           = LE16 (buf +  8);
 8003010:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8003014:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8003018:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800301c:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
    dev_desc->idProduct          = LE16 (buf + 10);
 8003020:	f894 2127 	ldrb.w	r2, [r4, #295]	; 0x127
 8003024:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8003028:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800302c:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8003030:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
 8003034:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8003038:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800303c:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8003040:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8003044:	f884 332e 	strb.w	r3, [r4, #814]	; 0x32e
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8003048:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 800304c:	f884 332f 	strb.w	r3, [r4, #815]	; 0x32f
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8003050:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8003054:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8003058:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800305c:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
}
 8003060:	b003      	add	sp, #12
 8003062:	bd30      	pop	{r4, r5, pc}

08003064 <USBH_Get_CfgDesc>:
{
 8003064:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  pData = phost->device.CfgDesc_Raw;
 8003068:	f100 051c 	add.w	r5, r0, #28
{
 800306c:	460f      	mov	r7, r1
  if((status = USBH_GetDescriptor(phost,
 800306e:	9100      	str	r1, [sp, #0]
 8003070:	462b      	mov	r3, r5
 8003072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003076:	2100      	movs	r1, #0
{
 8003078:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 800307a:	f7ff ff7e 	bl	8002f7a <USBH_GetDescriptor>
 800307e:	bb68      	cbnz	r0, 80030dc <USBH_Get_CfgDesc+0x78>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8003080:	7f23      	ldrb	r3, [r4, #28]
 8003082:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8003086:	7f63      	ldrb	r3, [r4, #29]
 8003088:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800308c:	7fa6      	ldrb	r6, [r4, #30]
 800308e:	7fe3      	ldrb	r3, [r4, #31]
 8003090:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8003094:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003098:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800309c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80030a0:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80030a4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80030a8:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80030ac:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80030b0:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80030b4:	b2b6      	uxth	r6, r6
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80030b6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80030ba:	f8a4 6334 	strh.w	r6, [r4, #820]	; 0x334
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80030be:	2f09      	cmp	r7, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80030c0:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80030c4:	d90a      	bls.n	80030dc <USBH_Get_CfgDesc+0x78>
 80030c6:	4622      	mov	r2, r4
 80030c8:	462b      	mov	r3, r5
 80030ca:	4686      	mov	lr, r0
 80030cc:	2109      	movs	r1, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80030ce:	f04f 081a 	mov.w	r8, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 80030d2:	f1be 0f02 	cmp.w	lr, #2
 80030d6:	d001      	beq.n	80030dc <USBH_Get_CfgDesc+0x78>
 80030d8:	428e      	cmp	r6, r1
 80030da:	d802      	bhi.n	80030e2 <USBH_Get_CfgDesc+0x7e>
}
 80030dc:	b002      	add	sp, #8
 80030de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80030e2:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 80030e4:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80030e6:	4429      	add	r1, r5
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80030e8:	785d      	ldrb	r5, [r3, #1]
 80030ea:	2d04      	cmp	r5, #4
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80030ec:	b289      	uxth	r1, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80030ee:	d1f0      	bne.n	80030d2 <USBH_Get_CfgDesc+0x6e>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80030f0:	781d      	ldrb	r5, [r3, #0]
 80030f2:	f882 533c 	strb.w	r5, [r2, #828]	; 0x33c
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80030f6:	785d      	ldrb	r5, [r3, #1]
 80030f8:	f882 533d 	strb.w	r5, [r2, #829]	; 0x33d
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80030fc:	789d      	ldrb	r5, [r3, #2]
 80030fe:	f882 533e 	strb.w	r5, [r2, #830]	; 0x33e
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8003102:	78dd      	ldrb	r5, [r3, #3]
 8003104:	f882 533f 	strb.w	r5, [r2, #831]	; 0x33f
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8003108:	791d      	ldrb	r5, [r3, #4]
 800310a:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800310e:	795d      	ldrb	r5, [r3, #5]
 8003110:	f882 5341 	strb.w	r5, [r2, #833]	; 0x341
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8003114:	799d      	ldrb	r5, [r3, #6]
 8003116:	f882 5342 	strb.w	r5, [r2, #834]	; 0x342
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800311a:	79dd      	ldrb	r5, [r3, #7]
 800311c:	f882 5343 	strb.w	r5, [r2, #835]	; 0x343
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8003120:	7a1d      	ldrb	r5, [r3, #8]
 8003122:	f882 5344 	strb.w	r5, [r2, #836]	; 0x344
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003126:	fb08 f90e 	mul.w	r9, r8, lr
        ep_ix = 0;
 800312a:	2500      	movs	r5, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800312c:	f892 7340 	ldrb.w	r7, [r2, #832]	; 0x340
 8003130:	42bd      	cmp	r5, r7
 8003132:	db03      	blt.n	800313c <USBH_Get_CfgDesc+0xd8>
 8003134:	f10e 0e01 	add.w	lr, lr, #1
 8003138:	321a      	adds	r2, #26
 800313a:	e7ca      	b.n	80030d2 <USBH_Get_CfgDesc+0x6e>
 800313c:	428e      	cmp	r6, r1
 800313e:	d9f9      	bls.n	8003134 <USBH_Get_CfgDesc+0xd0>
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8003140:	781f      	ldrb	r7, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8003142:	443b      	add	r3, r7
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8003144:	4439      	add	r1, r7
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8003146:	785f      	ldrb	r7, [r3, #1]
 8003148:	2f05      	cmp	r7, #5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800314a:	b289      	uxth	r1, r1
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 800314c:	d1ee      	bne.n	800312c <USBH_Get_CfgDesc+0xc8>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800314e:	1c6f      	adds	r7, r5, #1
 8003150:	eb09 05c7 	add.w	r5, r9, r7, lsl #3
 8003154:	4425      	add	r5, r4
 8003156:	f893 c000 	ldrb.w	ip, [r3]
 800315a:	f885 c33e 	strb.w	ip, [r5, #830]	; 0x33e
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800315e:	f893 c001 	ldrb.w	ip, [r3, #1]
 8003162:	f885 c33f 	strb.w	ip, [r5, #831]	; 0x33f
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8003166:	f893 c002 	ldrb.w	ip, [r3, #2]
 800316a:	f885 c340 	strb.w	ip, [r5, #832]	; 0x340
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800316e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8003172:	f885 c341 	strb.w	ip, [r5, #833]	; 0x341
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8003176:	f893 a005 	ldrb.w	sl, [r3, #5]
 800317a:	f893 c004 	ldrb.w	ip, [r3, #4]
 800317e:	eb0c 2c0a 	add.w	ip, ip, sl, lsl #8
 8003182:	f8a5 c342 	strh.w	ip, [r5, #834]	; 0x342
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8003186:	f893 c006 	ldrb.w	ip, [r3, #6]
 800318a:	f885 c344 	strb.w	ip, [r5, #836]	; 0x344
            ep_ix++;
 800318e:	b27d      	sxtb	r5, r7
 8003190:	e7cc      	b.n	800312c <USBH_Get_CfgDesc+0xc8>

08003192 <USBH_Get_StringDesc>:
{
 8003192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8003194:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8003198:	4614      	mov	r4, r2
 800319a:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 80031a2:	462b      	mov	r3, r5
 80031a4:	2100      	movs	r1, #0
{
 80031a6:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 80031a8:	f7ff fee7 	bl	8002f7a <USBH_GetDescriptor>
 80031ac:	b978      	cbnz	r0, 80031ce <USBH_Get_StringDesc+0x3c>
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 80031ae:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d10b      	bne.n	80031ce <USBH_Get_StringDesc+0x3c>
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 80031b6:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 80031ba:	3b02      	subs	r3, #2
 80031bc:	42bb      	cmp	r3, r7
 80031be:	bfa8      	it	ge
 80031c0:	463b      	movge	r3, r7
 80031c2:	b29b      	uxth	r3, r3
    for (idx = 0; idx < strlength; idx+=2 )
 80031c4:	4602      	mov	r2, r0
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d803      	bhi.n	80031d2 <USBH_Get_StringDesc+0x40>
    *pdest = 0; /* mark end of string */  
 80031ca:	2300      	movs	r3, #0
 80031cc:	7023      	strb	r3, [r4, #0]
}
 80031ce:	b003      	add	sp, #12
 80031d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 80031d2:	18a9      	adds	r1, r5, r2
    for (idx = 0; idx < strlength; idx+=2 )
 80031d4:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 80031d6:	7889      	ldrb	r1, [r1, #2]
 80031d8:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0; idx < strlength; idx+=2 )
 80031dc:	b292      	uxth	r2, r2
 80031de:	e7f2      	b.n	80031c6 <USBH_Get_StringDesc+0x34>

080031e0 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 80031e0:	7883      	ldrb	r3, [r0, #2]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d106      	bne.n	80031f4 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80031e6:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80031e8:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80031ea:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80031ec:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80031ee:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80031f0:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;
 80031f2:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );
 80031f4:	2200      	movs	r2, #0
 80031f6:	4611      	mov	r1, r2
 80031f8:	f7ff be02 	b.w	8002e00 <USBH_CtlReq>

080031fc <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 80031fc:	7883      	ldrb	r3, [r0, #2]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d106      	bne.n	8003210 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8003202:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003204:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8003206:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003208:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800320a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 800320c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0; 
 800320e:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );      
 8003210:	2200      	movs	r2, #0
 8003212:	4611      	mov	r1, r2
 8003214:	f7ff bdf4 	b.w	8002e00 <USBH_CtlReq>

08003218 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8003218:	7883      	ldrb	r3, [r0, #2]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d106      	bne.n	800322c <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 800321e:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8003220:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003222:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8003224:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003226:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8003228:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;           
 800322a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );   
 800322c:	2200      	movs	r2, #0
 800322e:	4611      	mov	r1, r2
 8003230:	f7ff bde6 	b.w	8002e00 <USBH_CtlReq>

08003234 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 8003234:	b530      	push	{r4, r5, lr}
 8003236:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003238:	2400      	movs	r4, #0
{
 800323a:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800323c:	2308      	movs	r3, #8
 800323e:	9302      	str	r3, [sp, #8]
 8003240:	9101      	str	r1, [sp, #4]
 8003242:	9403      	str	r4, [sp, #12]
 8003244:	9400      	str	r4, [sp, #0]
 8003246:	4623      	mov	r3, r4
 8003248:	4622      	mov	r2, r4
 800324a:	4629      	mov	r1, r5
 800324c:	f000 fc3a 	bl	8003ac4 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
}
 8003250:	4620      	mov	r0, r4
 8003252:	b005      	add	sp, #20
 8003254:	bd30      	pop	{r4, r5, pc}

08003256 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8003256:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003258:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800325c:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 800325e:	2d00      	cmp	r5, #0
{
 8003260:	461c      	mov	r4, r3
 8003262:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003266:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 8003268:	bf18      	it	ne
 800326a:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800326c:	9303      	str	r3, [sp, #12]
 800326e:	2301      	movs	r3, #1
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	2300      	movs	r3, #0
 8003274:	9101      	str	r1, [sp, #4]
 8003276:	461a      	mov	r2, r3
 8003278:	4621      	mov	r1, r4
 800327a:	f000 fc23 	bl	8003ac4 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
}
 800327e:	2000      	movs	r0, #0
 8003280:	b005      	add	sp, #20
 8003282:	bd30      	pop	{r4, r5, pc}

08003284 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003284:	b530      	push	{r4, r5, lr}
 8003286:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003288:	2400      	movs	r4, #0
{
 800328a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800328c:	9202      	str	r2, [sp, #8]
 800328e:	2201      	movs	r2, #1
 8003290:	9101      	str	r1, [sp, #4]
 8003292:	9403      	str	r4, [sp, #12]
 8003294:	9200      	str	r2, [sp, #0]
 8003296:	4623      	mov	r3, r4
 8003298:	4629      	mov	r1, r5
 800329a:	f000 fc13 	bl	8003ac4 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
  
}
 800329e:	4620      	mov	r0, r4
 80032a0:	b005      	add	sp, #20
 80032a2:	bd30      	pop	{r4, r5, pc}

080032a4 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 80032a4:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 80032a6:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{ 
 80032aa:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 80032ac:	2d00      	cmp	r5, #0
{ 
 80032ae:	461c      	mov	r4, r3
 80032b0:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80032b4:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 80032b6:	bf18      	it	ne
 80032b8:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80032ba:	9303      	str	r3, [sp, #12]
 80032bc:	2301      	movs	r3, #1
 80032be:	9101      	str	r1, [sp, #4]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	2302      	movs	r3, #2
 80032c6:	4621      	mov	r1, r4
 80032c8:	f000 fbfc 	bl	8003ac4 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 80032cc:	2000      	movs	r0, #0
 80032ce:	b005      	add	sp, #20
 80032d0:	bd30      	pop	{r4, r5, pc}

080032d2 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 80032d2:	b530      	push	{r4, r5, lr}
 80032d4:	b085      	sub	sp, #20
 80032d6:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80032d8:	2400      	movs	r4, #0
 80032da:	9202      	str	r2, [sp, #8]
 80032dc:	2201      	movs	r2, #1
 80032de:	9101      	str	r1, [sp, #4]
 80032e0:	9403      	str	r4, [sp, #12]
 80032e2:	9200      	str	r2, [sp, #0]
 80032e4:	2302      	movs	r3, #2
 80032e6:	4629      	mov	r1, r5
 80032e8:	f000 fbec 	bl	8003ac4 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
}
 80032ec:	4620      	mov	r0, r4
 80032ee:	b005      	add	sp, #20
 80032f0:	bd30      	pop	{r4, r5, pc}

080032f2 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80032f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 80032f4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80032f8:	9402      	str	r4, [sp, #8]
 80032fa:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80032fe:	9401      	str	r4, [sp, #4]
 8003300:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003304:	9400      	str	r4, [sp, #0]
 8003306:	f000 fbb7 	bl	8003a78 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);
  
  return USBH_OK; 

}
 800330a:	2000      	movs	r0, #0
 800330c:	b004      	add	sp, #16
 800330e:	bd10      	pop	{r4, pc}

08003310 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8003310:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8003312:	f000 fbc9 	bl	8003aa8 <USBH_LL_ClosePipe>
  
  return USBH_OK; 

}
 8003316:	2000      	movs	r0, #0
 8003318:	bd08      	pop	{r3, pc}

0800331a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800331a:	b530      	push	{r4, r5, lr}
 800331c:	2300      	movs	r3, #0
 800331e:	f500 745f 	add.w	r4, r0, #892	; 0x37c
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 8003322:	f854 5b04 	ldr.w	r5, [r4], #4
 8003326:	042d      	lsls	r5, r5, #16
 8003328:	b2da      	uxtb	r2, r3
 800332a:	d408      	bmi.n	800333e <USBH_AllocPipe+0x24>
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 800332c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003330:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return idx;
 8003334:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8003336:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
}
 800333a:	b2d0      	uxtb	r0, r2
 800333c:	bd30      	pop	{r4, r5, pc}
 800333e:	3301      	adds	r3, #1
  for (idx = 0 ; idx < 11 ; idx++)
 8003340:	2b0b      	cmp	r3, #11
 8003342:	d1ee      	bne.n	8003322 <USBH_AllocPipe+0x8>
	} 
  }
  return 0xFFFF;
 8003344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003348:	e7f7      	b.n	800333a <USBH_AllocPipe+0x20>

0800334a <USBH_FreePipe>:
   if(idx < 11)
 800334a:	290a      	cmp	r1, #10
 800334c:	bf9f      	itttt	ls
 800334e:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFF;
 8003352:	f8d0 337c 	ldrls.w	r3, [r0, #892]	; 0x37c
 8003356:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 800335a:	f8c0 337c 	strls.w	r3, [r0, #892]	; 0x37c
}
 800335e:	2000      	movs	r0, #0
 8003360:	4770      	bx	lr
	...

08003364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003364:	b530      	push	{r4, r5, lr}
 8003366:	b099      	sub	sp, #100	; 0x64
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003368:	4b2d      	ldr	r3, [pc, #180]	; (8003420 <SystemClock_Config+0xbc>)
 800336a:	2100      	movs	r1, #0
 800336c:	9101      	str	r1, [sp, #4]
 800336e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003370:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337c:	9301      	str	r3, [sp, #4]
 800337e:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003380:	4b28      	ldr	r3, [pc, #160]	; (8003424 <SystemClock_Config+0xc0>)
 8003382:	9102      	str	r1, [sp, #8]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003392:	9302      	str	r3, [sp, #8]
 8003394:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800339a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800339c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033a0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033a2:	2308      	movs	r3, #8
 80033a4:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80033a6:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033aa:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033ac:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 80033ae:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033b0:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80033b2:	2307      	movs	r3, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033b4:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033b6:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033b8:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80033ba:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033bc:	f7fe f956 	bl	800166c <HAL_RCC_OscConfig>
 80033c0:	b100      	cbz	r0, 80033c4 <SystemClock_Config+0x60>
 80033c2:	e7fe      	b.n	80033c2 <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033c4:	230f      	movs	r3, #15
 80033c6:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80033c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033cc:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80033ce:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80033d0:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80033d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80033d6:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033d8:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80033da:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80033dc:	f7fe faf6 	bl	80019cc <HAL_RCC_ClockConfig>
 80033e0:	b100      	cbz	r0, 80033e4 <SystemClock_Config+0x80>
 80033e2:	e7fe      	b.n	80033e2 <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80033e4:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033e6:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80033e8:	9405      	str	r4, [sp, #20]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80033ea:	9503      	str	r5, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80033ec:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033ee:	f7fe fb9d 	bl	8001b2c <HAL_RCCEx_PeriphCLKConfig>
 80033f2:	4604      	mov	r4, r0
 80033f4:	b100      	cbz	r0, 80033f8 <SystemClock_Config+0x94>
 80033f6:	e7fe      	b.n	80033f6 <SystemClock_Config+0x92>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80033f8:	f7fe fb82 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 80033fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003400:	fbb0 f0f3 	udiv	r0, r0, r3
 8003404:	f7fd f91e 	bl	8000644 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003408:	2004      	movs	r0, #4
 800340a:	f7fd f931 	bl	8000670 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800340e:	4622      	mov	r2, r4
 8003410:	4621      	mov	r1, r4
 8003412:	f04f 30ff 	mov.w	r0, #4294967295
 8003416:	f7fd f8d5 	bl	80005c4 <HAL_NVIC_SetPriority>
}
 800341a:	b019      	add	sp, #100	; 0x64
 800341c:	bd30      	pop	{r4, r5, pc}
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800
 8003424:	40007000 	.word	0x40007000

08003428 <main>:
{
 8003428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800342c:	b08c      	sub	sp, #48	; 0x30
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800342e:	2400      	movs	r4, #0
  HAL_Init();
 8003430:	f7fd f876 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 8003434:	f7ff ff96 	bl	8003364 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003438:	4b8d      	ldr	r3, [pc, #564]	; (8003670 <main+0x248>)
 800343a:	9401      	str	r4, [sp, #4]
 800343c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800343e:	488d      	ldr	r0, [pc, #564]	; (8003674 <main+0x24c>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003440:	4f8d      	ldr	r7, [pc, #564]	; (8003678 <main+0x250>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003442:	f042 0210 	orr.w	r2, r2, #16
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
 8003448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344a:	f002 0210 	and.w	r2, r2, #16
 800344e:	9201      	str	r2, [sp, #4]
 8003450:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003452:	9402      	str	r4, [sp, #8]
 8003454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003456:	f042 0204 	orr.w	r2, r2, #4
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
 800345c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345e:	f002 0204 	and.w	r2, r2, #4
 8003462:	9202      	str	r2, [sp, #8]
 8003464:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003466:	9403      	str	r4, [sp, #12]
 8003468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800346a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
 8003470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003472:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003476:	9203      	str	r2, [sp, #12]
 8003478:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800347a:	9404      	str	r4, [sp, #16]
 800347c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
 8003484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003486:	f002 0201 	and.w	r2, r2, #1
 800348a:	9204      	str	r2, [sp, #16]
 800348c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800348e:	9405      	str	r4, [sp, #20]
 8003490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003492:	f042 0202 	orr.w	r2, r2, #2
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
 8003498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800349a:	f002 0202 	and.w	r2, r2, #2
 800349e:	9205      	str	r2, [sp, #20]
 80034a0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034a2:	9406      	str	r4, [sp, #24]
 80034a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a6:	f042 0208 	orr.w	r2, r2, #8
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80034b4:	4622      	mov	r2, r4
 80034b6:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034b8:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80034ba:	f7fd f9d1 	bl	8000860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80034be:	2201      	movs	r2, #1
 80034c0:	4611      	mov	r1, r2
 80034c2:	486e      	ldr	r0, [pc, #440]	; (800367c <main+0x254>)
 80034c4:	f7fd f9cc 	bl	8000860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80034c8:	4622      	mov	r2, r4
 80034ca:	f24f 0110 	movw	r1, #61456	; 0xf010
 80034ce:	486c      	ldr	r0, [pc, #432]	; (8003680 <main+0x258>)
 80034d0:	f7fd f9c6 	bl	8000860 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d4:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80034d6:	2608      	movs	r6, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80034d8:	a907      	add	r1, sp, #28
 80034da:	4866      	ldr	r0, [pc, #408]	; (8003674 <main+0x24c>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80034dc:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034de:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80034e4:	f7fd f8d6 	bl	8000694 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80034e8:	a907      	add	r1, sp, #28
 80034ea:	4864      	ldr	r0, [pc, #400]	; (800367c <main+0x254>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80034ec:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ee:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034f0:	f04f 0805 	mov.w	r8, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80034f8:	f7fd f8cc 	bl	8000694 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80034fc:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80034fe:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003500:	2602      	movs	r6, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003502:	485e      	ldr	r0, [pc, #376]	; (800367c <main+0x254>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003508:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800350a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800350e:	f7fd f8c1 	bl	8000694 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003512:	a907      	add	r1, sp, #28
 8003514:	485b      	ldr	r0, [pc, #364]	; (8003684 <main+0x25c>)
  GPIO_InitStruct.Pin = B1_Pin;
 8003516:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003518:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800351c:	f7fd f8ba 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003520:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003522:	a907      	add	r1, sp, #28
 8003524:	4858      	ldr	r0, [pc, #352]	; (8003688 <main+0x260>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003526:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003528:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800352c:	f7fd f8b2 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003530:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003534:	a907      	add	r1, sp, #28
 8003536:	4854      	ldr	r0, [pc, #336]	; (8003688 <main+0x260>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003538:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003540:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003544:	f7fd f8a6 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8003548:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800354c:	a907      	add	r1, sp, #28
 800354e:	484c      	ldr	r0, [pc, #304]	; (8003680 <main+0x258>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8003550:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003552:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003556:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003558:	f7fd f89c 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800355c:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800355e:	a907      	add	r1, sp, #28
 8003560:	4847      	ldr	r0, [pc, #284]	; (8003680 <main+0x258>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003562:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003564:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003568:	f7fd f894 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800356c:	4841      	ldr	r0, [pc, #260]	; (8003674 <main+0x24c>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800356e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003570:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003572:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	9409      	str	r4, [sp, #36]	; 0x24
  hi2c1.Init.ClockSpeed = 100000;
 8003576:	4d45      	ldr	r5, [pc, #276]	; (800368c <main+0x264>)
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003578:	f7fd f88c 	bl	8000694 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 800357c:	4844      	ldr	r0, [pc, #272]	; (8003690 <main+0x268>)
  hi2c1.Init.ClockSpeed = 100000;
 800357e:	4b45      	ldr	r3, [pc, #276]	; (8003694 <main+0x26c>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003580:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8003582:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003586:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 800358a:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800358c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800358e:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003590:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003592:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003594:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003596:	f7fd fdb5 	bl	8001104 <HAL_I2C_Init>
 800359a:	b100      	cbz	r0, 800359e <main+0x176>
 800359c:	e7fe      	b.n	800359c <main+0x174>
  hi2s3.Instance = SPI3;
 800359e:	4b3e      	ldr	r3, [pc, #248]	; (8003698 <main+0x270>)
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80035a0:	4a3e      	ldr	r2, [pc, #248]	; (800369c <main+0x274>)
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80035a2:	6098      	str	r0, [r3, #8]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80035a4:	f44f 7400 	mov.w	r4, #512	; 0x200
 80035a8:	e883 0014 	stmia.w	r3, {r2, r4}
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80035ac:	60d8      	str	r0, [r3, #12]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80035ae:	4a3c      	ldr	r2, [pc, #240]	; (80036a0 <main+0x278>)
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80035b0:	6198      	str	r0, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80035b2:	61d8      	str	r0, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80035b4:	6218      	str	r0, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80035b6:	4618      	mov	r0, r3
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80035b8:	611c      	str	r4, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80035ba:	615a      	str	r2, [r3, #20]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80035bc:	f7fd fe14 	bl	80011e8 <HAL_I2S_Init>
 80035c0:	b100      	cbz	r0, 80035c4 <main+0x19c>
 80035c2:	e7fe      	b.n	80035c2 <main+0x19a>
  hspi1.Instance = SPI1;
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <main+0x27c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035c6:	4938      	ldr	r1, [pc, #224]	; (80036a8 <main+0x280>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035c8:	6098      	str	r0, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035ca:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035ce:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035d2:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035d4:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035d6:	6158      	str	r0, [r3, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035d8:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035da:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035dc:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035de:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80035e0:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035e2:	4618      	mov	r0, r3
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035e4:	619c      	str	r4, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 80035e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035e8:	f7fe fb66 	bl	8001cb8 <HAL_SPI_Init>
 80035ec:	b100      	cbz	r0, 80035f0 <main+0x1c8>
 80035ee:	e7fe      	b.n	80035ee <main+0x1c6>
  MX_USB_HOST_Init();
 80035f0:	f000 f976 	bl	80038e0 <MX_USB_HOST_Init>
        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && check == 1)
 80035f4:	4e21      	ldr	r6, [pc, #132]	; (800367c <main+0x254>)
        	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_15);
 80035f6:	4c22      	ldr	r4, [pc, #136]	; (8003680 <main+0x258>)
{
 80035f8:	2501      	movs	r5, #1
    MX_USB_HOST_Process();
 80035fa:	f000 f987 	bl	800390c <MX_USB_HOST_Process>
        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && check == 1)
 80035fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003602:	4630      	mov	r0, r6
 8003604:	f7fd f926 	bl	8000854 <HAL_GPIO_ReadPin>
 8003608:	b1a8      	cbz	r0, 8003636 <main+0x20e>
 800360a:	b1a5      	cbz	r5, 8003636 <main+0x20e>
        	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_15);
 800360c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003610:	4620      	mov	r0, r4
 8003612:	f7fd f92a 	bl	800086a <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_14);
 8003616:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800361a:	4620      	mov	r0, r4
 800361c:	f7fd f925 	bl	800086a <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_13);
 8003620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003624:	4620      	mov	r0, r4
 8003626:	f7fd f920 	bl	800086a <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_12);
 800362a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800362e:	4620      	mov	r0, r4
 8003630:	f7fd f91b 	bl	800086a <HAL_GPIO_TogglePin>
        	check = 0;
 8003634:	2500      	movs	r5, #0
        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7 && check == 0))
 8003636:	f085 0101 	eor.w	r1, r5, #1
 800363a:	4620      	mov	r0, r4
 800363c:	f7fd f90a 	bl	8000854 <HAL_GPIO_ReadPin>
 8003640:	2800      	cmp	r0, #0
 8003642:	d0da      	beq.n	80035fa <main+0x1d2>
        	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_15);
 8003644:	4620      	mov	r0, r4
 8003646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800364a:	f7fd f90e 	bl	800086a <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_14);
 800364e:	4620      	mov	r0, r4
 8003650:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003654:	f7fd f909 	bl	800086a <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_13);
 8003658:	4620      	mov	r0, r4
 800365a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800365e:	f7fd f904 	bl	800086a <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_12);
 8003662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003666:	4620      	mov	r0, r4
 8003668:	f7fd f8ff 	bl	800086a <HAL_GPIO_TogglePin>
 800366c:	e7c4      	b.n	80035f8 <main+0x1d0>
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	40021000 	.word	0x40021000
 8003678:	10120000 	.word	0x10120000
 800367c:	40020800 	.word	0x40020800
 8003680:	40020c00 	.word	0x40020c00
 8003684:	40020000 	.word	0x40020000
 8003688:	40020400 	.word	0x40020400
 800368c:	000186a0 	.word	0x000186a0
 8003690:	200000c0 	.word	0x200000c0
 8003694:	40005400 	.word	0x40005400
 8003698:	2000016c 	.word	0x2000016c
 800369c:	40003c00 	.word	0x40003c00
 80036a0:	00017700 	.word	0x00017700
 80036a4:	20000114 	.word	0x20000114
 80036a8:	40013000 	.word	0x40013000

080036ac <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80036ac:	e7fe      	b.n	80036ac <_Error_Handler>
	...

080036b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b0:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b2:	4b22      	ldr	r3, [pc, #136]	; (800373c <HAL_MspInit+0x8c>)
 80036b4:	2400      	movs	r4, #0
 80036b6:	9400      	str	r4, [sp, #0]
 80036b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036be:	645a      	str	r2, [r3, #68]	; 0x44
 80036c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80036c6:	9200      	str	r2, [sp, #0]
 80036c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	9401      	str	r4, [sp, #4]
 80036cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80036dc:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80036e0:	f7fc ff5e 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80036e4:	4622      	mov	r2, r4
 80036e6:	4621      	mov	r1, r4
 80036e8:	f06f 000b 	mvn.w	r0, #11
 80036ec:	f7fc ff6a 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80036f0:	4622      	mov	r2, r4
 80036f2:	4621      	mov	r1, r4
 80036f4:	f06f 000a 	mvn.w	r0, #10
 80036f8:	f7fc ff64 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80036fc:	4622      	mov	r2, r4
 80036fe:	4621      	mov	r1, r4
 8003700:	f06f 0009 	mvn.w	r0, #9
 8003704:	f7fc ff5e 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003708:	4622      	mov	r2, r4
 800370a:	4621      	mov	r1, r4
 800370c:	f06f 0004 	mvn.w	r0, #4
 8003710:	f7fc ff58 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003714:	4622      	mov	r2, r4
 8003716:	4621      	mov	r1, r4
 8003718:	f06f 0003 	mvn.w	r0, #3
 800371c:	f7fc ff52 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003720:	4622      	mov	r2, r4
 8003722:	4621      	mov	r1, r4
 8003724:	f06f 0001 	mvn.w	r0, #1
 8003728:	f7fc ff4c 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800372c:	4622      	mov	r2, r4
 800372e:	4621      	mov	r1, r4
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	f7fc ff46 	bl	80005c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003738:	b002      	add	sp, #8
 800373a:	bd10      	pop	{r4, pc}
 800373c:	40023800 	.word	0x40023800

08003740 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003740:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8003742:	6802      	ldr	r2, [r0, #0]
 8003744:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_I2C_MspInit+0x48>)
 8003746:	429a      	cmp	r2, r3
{
 8003748:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 800374a:	d11a      	bne.n	8003782 <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800374c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003750:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003752:	2312      	movs	r3, #18
 8003754:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003756:	2301      	movs	r3, #1
 8003758:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800375a:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375c:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800375e:	eb0d 0103 	add.w	r1, sp, r3
 8003762:	480a      	ldr	r0, [pc, #40]	; (800378c <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003764:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003766:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003768:	f7fc ff94 	bl	8000694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <HAL_I2C_MspInit+0x50>)
 800376e:	9400      	str	r4, [sp, #0]
 8003770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003772:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003776:	641a      	str	r2, [r3, #64]	; 0x40
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003782:	b006      	add	sp, #24
 8003784:	bd10      	pop	{r4, pc}
 8003786:	bf00      	nop
 8003788:	40005400 	.word	0x40005400
 800378c:	40020400 	.word	0x40020400
 8003790:	40023800 	.word	0x40023800

08003794 <HAL_I2S_MspInit>:
  }

}

void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003794:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2s->Instance==SPI3)
 8003796:	6802      	ldr	r2, [r0, #0]
 8003798:	4b14      	ldr	r3, [pc, #80]	; (80037ec <HAL_I2S_MspInit+0x58>)
 800379a:	429a      	cmp	r2, r3
{
 800379c:	b086      	sub	sp, #24
  if(hi2s->Instance==SPI3)
 800379e:	d123      	bne.n	80037e8 <HAL_I2S_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80037a0:	2400      	movs	r4, #0
 80037a2:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80037a6:	9400      	str	r4, [sp, #0]
 80037a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80037aa:	4811      	ldr	r0, [pc, #68]	; (80037f0 <HAL_I2S_MspInit+0x5c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80037ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI3_CLK_ENABLE();
 80037b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037be:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80037c0:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c2:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80037c4:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80037c6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80037c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ca:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80037cc:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80037ce:	f7fc ff61 	bl	8000694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80037d2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037d6:	a901      	add	r1, sp, #4
 80037d8:	4806      	ldr	r0, [pc, #24]	; (80037f4 <HAL_I2S_MspInit+0x60>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80037da:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037dc:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80037e2:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037e4:	f7fc ff56 	bl	8000694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80037e8:	b006      	add	sp, #24
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	40003c00 	.word	0x40003c00
 80037f0:	40020000 	.word	0x40020000
 80037f4:	40020800 	.word	0x40020800

080037f8 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80037fa:	6802      	ldr	r2, [r0, #0]
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <HAL_SPI_MspInit+0x40>)
 80037fe:	429a      	cmp	r2, r3
 8003800:	d117      	bne.n	8003832 <HAL_SPI_MspInit+0x3a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	4a0d      	ldr	r2, [pc, #52]	; (800383c <HAL_SPI_MspInit+0x44>)
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	6c51      	ldr	r1, [r2, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380a:	480d      	ldr	r0, [pc, #52]	; (8003840 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800380c:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003810:	6451      	str	r1, [r2, #68]	; 0x44
 8003812:	6c52      	ldr	r2, [r2, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	9303      	str	r3, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003816:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800381a:	9200      	str	r2, [sp, #0]
 800381c:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003820:	22e0      	movs	r2, #224	; 0xe0
 8003822:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003824:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003826:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003828:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382a:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800382c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382e:	f7fc ff31 	bl	8000694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003832:	b007      	add	sp, #28
 8003834:	f85d fb04 	ldr.w	pc, [sp], #4
 8003838:	40013000 	.word	0x40013000
 800383c:	40023800 	.word	0x40023800
 8003840:	40020000 	.word	0x40020000

08003844 <NMI_Handler>:
 8003844:	4770      	bx	lr

08003846 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003846:	e7fe      	b.n	8003846 <HardFault_Handler>

08003848 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003848:	e7fe      	b.n	8003848 <MemManage_Handler>

0800384a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800384a:	e7fe      	b.n	800384a <BusFault_Handler>

0800384c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800384c:	e7fe      	b.n	800384c <UsageFault_Handler>

0800384e <SVC_Handler>:
 800384e:	4770      	bx	lr

08003850 <DebugMon_Handler>:
 8003850:	4770      	bx	lr

08003852 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003852:	4770      	bx	lr

08003854 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003854:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003856:	f7fc fe7d 	bl	8000554 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800385a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800385e:	f7fc bf14 	b.w	800068a <HAL_SYSTICK_IRQHandler>
	...

08003864 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003864:	4801      	ldr	r0, [pc, #4]	; (800386c <OTG_FS_IRQHandler+0x8>)
 8003866:	f7fd b903 	b.w	8000a70 <HAL_HCD_IRQHandler>
 800386a:	bf00      	nop
 800386c:	2000057c 	.word	0x2000057c

08003870 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003870:	490f      	ldr	r1, [pc, #60]	; (80038b0 <SystemInit+0x40>)
 8003872:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003876:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <SystemInit+0x44>)
 8003880:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003882:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800388a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003892:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003896:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003898:	4a07      	ldr	r2, [pc, #28]	; (80038b8 <SystemInit+0x48>)
 800389a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038a2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80038a4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038aa:	608b      	str	r3, [r1, #8]
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	e000ed00 	.word	0xe000ed00
 80038b4:	40023800 	.word	0x40023800
 80038b8:	24003010 	.word	0x24003010

080038bc <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80038bc:	2904      	cmp	r1, #4
 80038be:	d00a      	beq.n	80038d6 <USBH_UserProcess+0x1a>
 80038c0:	2905      	cmp	r1, #5
 80038c2:	d004      	beq.n	80038ce <USBH_UserProcess+0x12>
 80038c4:	2902      	cmp	r1, #2
 80038c6:	d105      	bne.n	80038d4 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <USBH_UserProcess+0x20>)
 80038ca:	7019      	strb	r1, [r3, #0]
  break;
 80038cc:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 80038ce:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80038d0:	4b02      	ldr	r3, [pc, #8]	; (80038dc <USBH_UserProcess+0x20>)
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	4770      	bx	lr
 80038d6:	2201      	movs	r2, #1
 80038d8:	e7fa      	b.n	80038d0 <USBH_UserProcess+0x14>
 80038da:	bf00      	nop
 80038dc:	200000ac 	.word	0x200000ac

080038e0 <MX_USB_HOST_Init>:
{
 80038e0:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 80038e2:	4c07      	ldr	r4, [pc, #28]	; (8003900 <MX_USB_HOST_Init+0x20>)
 80038e4:	4907      	ldr	r1, [pc, #28]	; (8003904 <MX_USB_HOST_Init+0x24>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7ff f8db 	bl	8002aa4 <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS);
 80038ee:	4620      	mov	r0, r4
 80038f0:	4905      	ldr	r1, [pc, #20]	; (8003908 <MX_USB_HOST_Init+0x28>)
 80038f2:	f7ff f8ee 	bl	8002ad2 <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 80038f6:	4620      	mov	r0, r4
}
 80038f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 80038fc:	f7ff b91c 	b.w	8002b38 <USBH_Start>
 8003900:	200001b4 	.word	0x200001b4
 8003904:	080038bd 	.word	0x080038bd
 8003908:	20000008 	.word	0x20000008

0800390c <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 800390c:	4801      	ldr	r0, [pc, #4]	; (8003914 <MX_USB_HOST_Process+0x8>)
 800390e:	f7ff b91d 	b.w	8002b4c <USBH_Process>
 8003912:	bf00      	nop
 8003914:	200001b4 	.word	0x200001b4

08003918 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8003918:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 800391a:	6803      	ldr	r3, [r0, #0]
 800391c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003920:	b086      	sub	sp, #24
  if(hcdHandle->Instance==USB_OTG_FS)
 8003922:	d12d      	bne.n	8003980 <HAL_HCD_MspInit+0x68>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003924:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003926:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800392a:	a901      	add	r1, sp, #4
 800392c:	4815      	ldr	r0, [pc, #84]	; (8003984 <HAL_HCD_MspInit+0x6c>)
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800392e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003930:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003932:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003934:	f7fc feae 	bl	8000694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003938:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800393c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393e:	2302      	movs	r3, #2
 8003940:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003942:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003944:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003946:	480f      	ldr	r0, [pc, #60]	; (8003984 <HAL_HCD_MspInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003948:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394e:	f7fc fea1 	bl	8000694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003952:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <HAL_HCD_MspInit+0x70>)
 8003954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003956:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800395a:	635a      	str	r2, [r3, #52]	; 0x34
 800395c:	9400      	str	r4, [sp, #0]
 800395e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003960:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003964:	645a      	str	r2, [r3, #68]	; 0x44
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396c:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800396e:	2043      	movs	r0, #67	; 0x43
 8003970:	4622      	mov	r2, r4
 8003972:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003974:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003976:	f7fc fe25 	bl	80005c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800397a:	2043      	movs	r0, #67	; 0x43
 800397c:	f7fc fe56 	bl	800062c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003980:	b006      	add	sp, #24
 8003982:	bd10      	pop	{r4, pc}
 8003984:	40020000 	.word	0x40020000
 8003988:	40023800 	.word	0x40023800

0800398c <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 800398c:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8003990:	f7ff b9f9 	b.w	8002d86 <USBH_LL_IncTimer>

08003994 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8003994:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8003998:	f7ff ba03 	b.w	8002da2 <USBH_LL_Connect>

0800399c <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800399c:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 80039a0:	f7ff ba12 	b.w	8002dc8 <USBH_LL_Disconnect>

080039a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80039a4:	4770      	bx	lr
	...

080039a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80039a8:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80039aa:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80039ae:	2b01      	cmp	r3, #1
{
 80039b0:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 80039b2:	d11e      	bne.n	80039f2 <USBH_LL_Init+0x4a>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80039b4:	4810      	ldr	r0, [pc, #64]	; (80039f8 <USBH_LL_Init+0x50>)
  phost->pData = &hhcd_USB_OTG_FS;
 80039b6:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80039ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039be:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80039c0:	2308      	movs	r3, #8
 80039c2:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80039c4:	2303      	movs	r3, #3
 80039c6:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80039c8:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80039ca:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 80039cc:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80039d0:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80039d2:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80039d4:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80039d6:	f7fc ff8f 	bl	80008f8 <HAL_HCD_Init>
 80039da:	b118      	cbz	r0, 80039e4 <USBH_LL_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80039dc:	21e2      	movs	r1, #226	; 0xe2
 80039de:	4807      	ldr	r0, [pc, #28]	; (80039fc <USBH_LL_Init+0x54>)
 80039e0:	f7ff fe64 	bl	80036ac <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80039e4:	4804      	ldr	r0, [pc, #16]	; (80039f8 <USBH_LL_Init+0x50>)
 80039e6:	f7fd fb87 	bl	80010f8 <HAL_HCD_GetCurrentFrame>
 80039ea:	4601      	mov	r1, r0
 80039ec:	4620      	mov	r0, r4
 80039ee:	f7ff f9c7 	bl	8002d80 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 80039f2:	2000      	movs	r0, #0
 80039f4:	bd10      	pop	{r4, pc}
 80039f6:	bf00      	nop
 80039f8:	2000057c 	.word	0x2000057c
 80039fc:	08003ddf 	.word	0x08003ddf

08003a00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8003a00:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8003a02:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8003a06:	f7fd fb41 	bl	800108c <HAL_HCD_Start>
 8003a0a:	2803      	cmp	r0, #3
 8003a0c:	bf9a      	itte	ls
 8003a0e:	4b02      	ldrls	r3, [pc, #8]	; (8003a18 <USBH_LL_Start+0x18>)
 8003a10:	5c18      	ldrbls	r0, [r3, r0]
 8003a12:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8003a14:	bd08      	pop	{r3, pc}
 8003a16:	bf00      	nop
 8003a18:	08003ddb 	.word	0x08003ddb

08003a1c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8003a1c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8003a1e:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8003a22:	f7fd fb49 	bl	80010b8 <HAL_HCD_Stop>
 8003a26:	2803      	cmp	r0, #3
 8003a28:	bf9a      	itte	ls
 8003a2a:	4b02      	ldrls	r3, [pc, #8]	; (8003a34 <USBH_LL_Stop+0x18>)
 8003a2c:	5c18      	ldrbls	r0, [r3, r0]
 8003a2e:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8003a30:	bd08      	pop	{r3, pc}
 8003a32:	bf00      	nop
 8003a34:	08003ddb 	.word	0x08003ddb

08003a38 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8003a38:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8003a3a:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8003a3e:	f7fd fb5e 	bl	80010fe <HAL_HCD_GetCurrentSpeed>
 8003a42:	2802      	cmp	r0, #2
 8003a44:	bf9a      	itte	ls
 8003a46:	4b02      	ldrls	r3, [pc, #8]	; (8003a50 <USBH_LL_GetSpeed+0x18>)
 8003a48:	5c18      	ldrbls	r0, [r3, r0]
 8003a4a:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8003a4c:	bd08      	pop	{r3, pc}
 8003a4e:	bf00      	nop
 8003a50:	08003dd8 	.word	0x08003dd8

08003a54 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8003a54:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8003a56:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8003a5a:	f7fd fb3f 	bl	80010dc <HAL_HCD_ResetPort>
 8003a5e:	2803      	cmp	r0, #3
 8003a60:	bf9a      	itte	ls
 8003a62:	4b02      	ldrls	r3, [pc, #8]	; (8003a6c <USBH_LL_ResetPort+0x18>)
 8003a64:	5c18      	ldrbls	r0, [r3, r0]
 8003a66:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8003a68:	bd08      	pop	{r3, pc}
 8003a6a:	bf00      	nop
 8003a6c:	08003ddb 	.word	0x08003ddb

08003a70 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8003a70:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8003a74:	f7fd bb3b 	b.w	80010ee <HAL_HCD_HC_GetXferCount>

08003a78 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8003a7a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003a7e:	9402      	str	r4, [sp, #8]
 8003a80:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8003a84:	9401      	str	r4, [sp, #4]
 8003a86:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003a8a:	9400      	str	r4, [sp, #0]
 8003a8c:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8003a90:	f7fc feef 	bl	8000872 <HAL_HCD_HC_Init>
 8003a94:	2803      	cmp	r0, #3
 8003a96:	bf9a      	itte	ls
 8003a98:	4b02      	ldrls	r3, [pc, #8]	; (8003aa4 <USBH_LL_OpenPipe+0x2c>)
 8003a9a:	5c18      	ldrbls	r0, [r3, r0]
 8003a9c:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8003a9e:	b004      	add	sp, #16
 8003aa0:	bd10      	pop	{r4, pc}
 8003aa2:	bf00      	nop
 8003aa4:	08003ddb 	.word	0x08003ddb

08003aa8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8003aa8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8003aaa:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8003aae:	f7fc ff11 	bl	80008d4 <HAL_HCD_HC_Halt>
 8003ab2:	2803      	cmp	r0, #3
 8003ab4:	bf9a      	itte	ls
 8003ab6:	4b02      	ldrls	r3, [pc, #8]	; (8003ac0 <USBH_LL_ClosePipe+0x18>)
 8003ab8:	5c18      	ldrbls	r0, [r3, r0]
 8003aba:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8003abc:	bd08      	pop	{r3, pc}
 8003abe:	bf00      	nop
 8003ac0:	08003ddb 	.word	0x08003ddb

08003ac4 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8003ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8003ac6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8003aca:	9403      	str	r4, [sp, #12]
 8003acc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003ad0:	9402      	str	r4, [sp, #8]
 8003ad2:	9c07      	ldr	r4, [sp, #28]
 8003ad4:	9401      	str	r4, [sp, #4]
 8003ad6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003ada:	9400      	str	r4, [sp, #0]
 8003adc:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8003ae0:	f7fc ff46 	bl	8000970 <HAL_HCD_HC_SubmitRequest>
 8003ae4:	2803      	cmp	r0, #3
 8003ae6:	bf9a      	itte	ls
 8003ae8:	4b02      	ldrls	r3, [pc, #8]	; (8003af4 <USBH_LL_SubmitURB+0x30>)
 8003aea:	5c18      	ldrbls	r0, [r3, r0]
 8003aec:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8003aee:	b004      	add	sp, #16
 8003af0:	bd10      	pop	{r4, pc}
 8003af2:	bf00      	nop
 8003af4:	08003ddb 	.word	0x08003ddb

08003af8 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8003af8:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8003afc:	f7fd baf1 	b.w	80010e2 <HAL_HCD_HC_GetURBState>

08003b00 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8003b00:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8003b02:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d102      	bne.n	8003b10 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8003b0a:	4608      	mov	r0, r1
 8003b0c:	f000 f816 	bl	8003b3c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8003b10:	20c8      	movs	r0, #200	; 0xc8
 8003b12:	f7fc fd31 	bl	8000578 <HAL_Delay>
  return USBH_OK;
}
 8003b16:	2000      	movs	r0, #0
 8003b18:	bd08      	pop	{r3, pc}

08003b1a <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8003b1a:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0

  if(pHandle->hc[pipe].ep_is_in)
 8003b1e:	2328      	movs	r3, #40	; 0x28
 8003b20:	fb03 0101 	mla	r1, r3, r1, r0
 8003b24:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8003b28:	b11b      	cbz	r3, 8003b32 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8003b2a:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8003b2e:	2000      	movs	r0, #0
 8003b30:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8003b32:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8003b36:	e7fa      	b.n	8003b2e <USBH_LL_SetToggle+0x14>

08003b38 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8003b38:	f7fc bd1e 	b.w	8000578 <HAL_Delay>

08003b3c <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8003b3c:	fab0 f280 	clz	r2, r0
 8003b40:	0952      	lsrs	r2, r2, #5
 8003b42:	2101      	movs	r1, #1
 8003b44:	4801      	ldr	r0, [pc, #4]	; (8003b4c <MX_DriverVbusFS+0x10>)
 8003b46:	f7fc be8b 	b.w	8000860 <HAL_GPIO_WritePin>
 8003b4a:	bf00      	nop
 8003b4c:	40020800 	.word	0x40020800

08003b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b56:	e003      	b.n	8003b60 <LoopCopyDataInit>

08003b58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b5e:	3104      	adds	r1, #4

08003b60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b60:	480b      	ldr	r0, [pc, #44]	; (8003b90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b62:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b68:	d3f6      	bcc.n	8003b58 <CopyDataInit>
  ldr  r2, =_sbss
 8003b6a:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b6c:	e002      	b.n	8003b74 <LoopFillZerobss>

08003b6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b70:	f842 3b04 	str.w	r3, [r2], #4

08003b74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b78:	d3f9      	bcc.n	8003b6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b7a:	f7ff fe79 	bl	8003870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b7e:	f000 f811 	bl	8003ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b82:	f7ff fc51 	bl	8003428 <main>
  bx  lr    
 8003b86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003b8c:	08003e04 	.word	0x08003e04
  ldr  r0, =_sdata
 8003b90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b94:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8003b98:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8003b9c:	20000818 	.word	0x20000818

08003ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ba0:	e7fe      	b.n	8003ba0 <ADC_IRQHandler>
	...

08003ba4 <__libc_init_array>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	4e0d      	ldr	r6, [pc, #52]	; (8003bdc <__libc_init_array+0x38>)
 8003ba8:	4c0d      	ldr	r4, [pc, #52]	; (8003be0 <__libc_init_array+0x3c>)
 8003baa:	1ba4      	subs	r4, r4, r6
 8003bac:	10a4      	asrs	r4, r4, #2
 8003bae:	2500      	movs	r5, #0
 8003bb0:	42a5      	cmp	r5, r4
 8003bb2:	d109      	bne.n	8003bc8 <__libc_init_array+0x24>
 8003bb4:	4e0b      	ldr	r6, [pc, #44]	; (8003be4 <__libc_init_array+0x40>)
 8003bb6:	4c0c      	ldr	r4, [pc, #48]	; (8003be8 <__libc_init_array+0x44>)
 8003bb8:	f000 f8f4 	bl	8003da4 <_init>
 8003bbc:	1ba4      	subs	r4, r4, r6
 8003bbe:	10a4      	asrs	r4, r4, #2
 8003bc0:	2500      	movs	r5, #0
 8003bc2:	42a5      	cmp	r5, r4
 8003bc4:	d105      	bne.n	8003bd2 <__libc_init_array+0x2e>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bcc:	4798      	blx	r3
 8003bce:	3501      	adds	r5, #1
 8003bd0:	e7ee      	b.n	8003bb0 <__libc_init_array+0xc>
 8003bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bd6:	4798      	blx	r3
 8003bd8:	3501      	adds	r5, #1
 8003bda:	e7f2      	b.n	8003bc2 <__libc_init_array+0x1e>
 8003bdc:	08003dfc 	.word	0x08003dfc
 8003be0:	08003dfc 	.word	0x08003dfc
 8003be4:	08003dfc 	.word	0x08003dfc
 8003be8:	08003e00 	.word	0x08003e00

08003bec <malloc>:
 8003bec:	4b02      	ldr	r3, [pc, #8]	; (8003bf8 <malloc+0xc>)
 8003bee:	4601      	mov	r1, r0
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	f000 b859 	b.w	8003ca8 <_malloc_r>
 8003bf6:	bf00      	nop
 8003bf8:	2000002c 	.word	0x2000002c

08003bfc <free>:
 8003bfc:	4b02      	ldr	r3, [pc, #8]	; (8003c08 <free+0xc>)
 8003bfe:	4601      	mov	r1, r0
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	f000 b803 	b.w	8003c0c <_free_r>
 8003c06:	bf00      	nop
 8003c08:	2000002c 	.word	0x2000002c

08003c0c <_free_r>:
 8003c0c:	b538      	push	{r3, r4, r5, lr}
 8003c0e:	4605      	mov	r5, r0
 8003c10:	2900      	cmp	r1, #0
 8003c12:	d045      	beq.n	8003ca0 <_free_r+0x94>
 8003c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c18:	1f0c      	subs	r4, r1, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bfb8      	it	lt
 8003c1e:	18e4      	addlt	r4, r4, r3
 8003c20:	f000 f8b0 	bl	8003d84 <__malloc_lock>
 8003c24:	4a1f      	ldr	r2, [pc, #124]	; (8003ca4 <_free_r+0x98>)
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	4610      	mov	r0, r2
 8003c2a:	b933      	cbnz	r3, 8003c3a <_free_r+0x2e>
 8003c2c:	6063      	str	r3, [r4, #4]
 8003c2e:	6014      	str	r4, [r2, #0]
 8003c30:	4628      	mov	r0, r5
 8003c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c36:	f000 b8a6 	b.w	8003d86 <__malloc_unlock>
 8003c3a:	42a3      	cmp	r3, r4
 8003c3c:	d90c      	bls.n	8003c58 <_free_r+0x4c>
 8003c3e:	6821      	ldr	r1, [r4, #0]
 8003c40:	1862      	adds	r2, r4, r1
 8003c42:	4293      	cmp	r3, r2
 8003c44:	bf04      	itt	eq
 8003c46:	681a      	ldreq	r2, [r3, #0]
 8003c48:	685b      	ldreq	r3, [r3, #4]
 8003c4a:	6063      	str	r3, [r4, #4]
 8003c4c:	bf04      	itt	eq
 8003c4e:	1852      	addeq	r2, r2, r1
 8003c50:	6022      	streq	r2, [r4, #0]
 8003c52:	6004      	str	r4, [r0, #0]
 8003c54:	e7ec      	b.n	8003c30 <_free_r+0x24>
 8003c56:	4613      	mov	r3, r2
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	b10a      	cbz	r2, 8003c60 <_free_r+0x54>
 8003c5c:	42a2      	cmp	r2, r4
 8003c5e:	d9fa      	bls.n	8003c56 <_free_r+0x4a>
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	1858      	adds	r0, r3, r1
 8003c64:	42a0      	cmp	r0, r4
 8003c66:	d10b      	bne.n	8003c80 <_free_r+0x74>
 8003c68:	6820      	ldr	r0, [r4, #0]
 8003c6a:	4401      	add	r1, r0
 8003c6c:	1858      	adds	r0, r3, r1
 8003c6e:	4282      	cmp	r2, r0
 8003c70:	6019      	str	r1, [r3, #0]
 8003c72:	d1dd      	bne.n	8003c30 <_free_r+0x24>
 8003c74:	6810      	ldr	r0, [r2, #0]
 8003c76:	6852      	ldr	r2, [r2, #4]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	4401      	add	r1, r0
 8003c7c:	6019      	str	r1, [r3, #0]
 8003c7e:	e7d7      	b.n	8003c30 <_free_r+0x24>
 8003c80:	d902      	bls.n	8003c88 <_free_r+0x7c>
 8003c82:	230c      	movs	r3, #12
 8003c84:	602b      	str	r3, [r5, #0]
 8003c86:	e7d3      	b.n	8003c30 <_free_r+0x24>
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	1821      	adds	r1, r4, r0
 8003c8c:	428a      	cmp	r2, r1
 8003c8e:	bf04      	itt	eq
 8003c90:	6811      	ldreq	r1, [r2, #0]
 8003c92:	6852      	ldreq	r2, [r2, #4]
 8003c94:	6062      	str	r2, [r4, #4]
 8003c96:	bf04      	itt	eq
 8003c98:	1809      	addeq	r1, r1, r0
 8003c9a:	6021      	streq	r1, [r4, #0]
 8003c9c:	605c      	str	r4, [r3, #4]
 8003c9e:	e7c7      	b.n	8003c30 <_free_r+0x24>
 8003ca0:	bd38      	pop	{r3, r4, r5, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200000b0 	.word	0x200000b0

08003ca8 <_malloc_r>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	1ccd      	adds	r5, r1, #3
 8003cac:	f025 0503 	bic.w	r5, r5, #3
 8003cb0:	3508      	adds	r5, #8
 8003cb2:	2d0c      	cmp	r5, #12
 8003cb4:	bf38      	it	cc
 8003cb6:	250c      	movcc	r5, #12
 8003cb8:	2d00      	cmp	r5, #0
 8003cba:	4606      	mov	r6, r0
 8003cbc:	db01      	blt.n	8003cc2 <_malloc_r+0x1a>
 8003cbe:	42a9      	cmp	r1, r5
 8003cc0:	d903      	bls.n	8003cca <_malloc_r+0x22>
 8003cc2:	230c      	movs	r3, #12
 8003cc4:	6033      	str	r3, [r6, #0]
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	bd70      	pop	{r4, r5, r6, pc}
 8003cca:	f000 f85b 	bl	8003d84 <__malloc_lock>
 8003cce:	4a23      	ldr	r2, [pc, #140]	; (8003d5c <_malloc_r+0xb4>)
 8003cd0:	6814      	ldr	r4, [r2, #0]
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	b991      	cbnz	r1, 8003cfc <_malloc_r+0x54>
 8003cd6:	4c22      	ldr	r4, [pc, #136]	; (8003d60 <_malloc_r+0xb8>)
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	b91b      	cbnz	r3, 8003ce4 <_malloc_r+0x3c>
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f000 f841 	bl	8003d64 <_sbrk_r>
 8003ce2:	6020      	str	r0, [r4, #0]
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f000 f83c 	bl	8003d64 <_sbrk_r>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d126      	bne.n	8003d3e <_malloc_r+0x96>
 8003cf0:	230c      	movs	r3, #12
 8003cf2:	6033      	str	r3, [r6, #0]
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	f000 f846 	bl	8003d86 <__malloc_unlock>
 8003cfa:	e7e4      	b.n	8003cc6 <_malloc_r+0x1e>
 8003cfc:	680b      	ldr	r3, [r1, #0]
 8003cfe:	1b5b      	subs	r3, r3, r5
 8003d00:	d41a      	bmi.n	8003d38 <_malloc_r+0x90>
 8003d02:	2b0b      	cmp	r3, #11
 8003d04:	d90f      	bls.n	8003d26 <_malloc_r+0x7e>
 8003d06:	600b      	str	r3, [r1, #0]
 8003d08:	50cd      	str	r5, [r1, r3]
 8003d0a:	18cc      	adds	r4, r1, r3
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	f000 f83a 	bl	8003d86 <__malloc_unlock>
 8003d12:	f104 000b 	add.w	r0, r4, #11
 8003d16:	1d23      	adds	r3, r4, #4
 8003d18:	f020 0007 	bic.w	r0, r0, #7
 8003d1c:	1ac3      	subs	r3, r0, r3
 8003d1e:	d01b      	beq.n	8003d58 <_malloc_r+0xb0>
 8003d20:	425a      	negs	r2, r3
 8003d22:	50e2      	str	r2, [r4, r3]
 8003d24:	bd70      	pop	{r4, r5, r6, pc}
 8003d26:	428c      	cmp	r4, r1
 8003d28:	bf0d      	iteet	eq
 8003d2a:	6863      	ldreq	r3, [r4, #4]
 8003d2c:	684b      	ldrne	r3, [r1, #4]
 8003d2e:	6063      	strne	r3, [r4, #4]
 8003d30:	6013      	streq	r3, [r2, #0]
 8003d32:	bf18      	it	ne
 8003d34:	460c      	movne	r4, r1
 8003d36:	e7e9      	b.n	8003d0c <_malloc_r+0x64>
 8003d38:	460c      	mov	r4, r1
 8003d3a:	6849      	ldr	r1, [r1, #4]
 8003d3c:	e7ca      	b.n	8003cd4 <_malloc_r+0x2c>
 8003d3e:	1cc4      	adds	r4, r0, #3
 8003d40:	f024 0403 	bic.w	r4, r4, #3
 8003d44:	42a0      	cmp	r0, r4
 8003d46:	d005      	beq.n	8003d54 <_malloc_r+0xac>
 8003d48:	1a21      	subs	r1, r4, r0
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f000 f80a 	bl	8003d64 <_sbrk_r>
 8003d50:	3001      	adds	r0, #1
 8003d52:	d0cd      	beq.n	8003cf0 <_malloc_r+0x48>
 8003d54:	6025      	str	r5, [r4, #0]
 8003d56:	e7d9      	b.n	8003d0c <_malloc_r+0x64>
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	bf00      	nop
 8003d5c:	200000b0 	.word	0x200000b0
 8003d60:	200000b4 	.word	0x200000b4

08003d64 <_sbrk_r>:
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	4c06      	ldr	r4, [pc, #24]	; (8003d80 <_sbrk_r+0x1c>)
 8003d68:	2300      	movs	r3, #0
 8003d6a:	4605      	mov	r5, r0
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	6023      	str	r3, [r4, #0]
 8003d70:	f000 f80a 	bl	8003d88 <_sbrk>
 8003d74:	1c43      	adds	r3, r0, #1
 8003d76:	d102      	bne.n	8003d7e <_sbrk_r+0x1a>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	b103      	cbz	r3, 8003d7e <_sbrk_r+0x1a>
 8003d7c:	602b      	str	r3, [r5, #0]
 8003d7e:	bd38      	pop	{r3, r4, r5, pc}
 8003d80:	20000814 	.word	0x20000814

08003d84 <__malloc_lock>:
 8003d84:	4770      	bx	lr

08003d86 <__malloc_unlock>:
 8003d86:	4770      	bx	lr

08003d88 <_sbrk>:
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <_sbrk+0x14>)
 8003d8a:	6819      	ldr	r1, [r3, #0]
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	b909      	cbnz	r1, 8003d94 <_sbrk+0xc>
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <_sbrk+0x18>)
 8003d92:	6019      	str	r1, [r3, #0]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	4402      	add	r2, r0
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	4770      	bx	lr
 8003d9c:	200000b8 	.word	0x200000b8
 8003da0:	20000818 	.word	0x20000818

08003da4 <_init>:
 8003da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da6:	bf00      	nop
 8003da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003daa:	bc08      	pop	{r3}
 8003dac:	469e      	mov	lr, r3
 8003dae:	4770      	bx	lr

08003db0 <_fini>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	bf00      	nop
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr
